{"version":3,"file":"451.bundle.b637f56818d02ce58b8a.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/initSEGToolGroup.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/promptHydrateSEG.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/OHIFCornerstoneSEGViewport.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/viewports/_getStatusComponent.tsx"],"sourcesContent":["function createSEGToolGroupAndAddTools(ToolGroupService, customizationService, toolGroupId) {\n  const { tools } = customizationService.get('cornerstone.overlayViewportTools') ?? {};\n\n  return ToolGroupService.createToolGroupAndAddTools(toolGroupId, tools);\n}\n\nexport default createSEGToolGroupAndAddTools;\n","import { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  HYDRATE_SEG: 5,\n};\n\nfunction promptHydrateSEG({\n  servicesManager,\n  segDisplaySet,\n  viewportId,\n  preHydrateCallbacks,\n  hydrateSEGDisplaySet,\n}) {\n  const { uiViewportDialogService } = servicesManager.services;\n\n  return new Promise(async function (resolve, reject) {\n    const promptResult = await _askHydrate(uiViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.HYDRATE_SEG) {\n      preHydrateCallbacks?.forEach(callback => {\n        callback();\n      });\n\n      const isHydrated = await hydrateSEGDisplaySet({\n        segDisplaySet,\n        viewportId,\n      });\n\n      resolve(isHydrated);\n    }\n  });\n}\n\nfunction _askHydrate(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to open this Segmentation?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_SEG,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateSEG;\n","import PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport OHIF, { utils } from '@ohif/core';\nimport { LoadingIndicatorTotalPercent, useViewportGrid, ViewportActionBar } from '@ohif/ui';\nimport createSEGToolGroupAndAddTools from '../utils/initSEGToolGroup';\nimport promptHydrateSEG from '../utils/promptHydrateSEG';\nimport _getStatusComponent from './_getStatusComponent';\n\nconst { formatDate } = utils;\nconst SEG_TOOLGROUP_BASE_NAME = 'SEGToolGroup';\n\nfunction OHIFCornerstoneSEGViewport(props) {\n  const {\n    children,\n    displaySets,\n    viewportOptions,\n    viewportLabel,\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  } = props;\n\n  const { t } = useTranslation('SEGViewport');\n  const viewportId = viewportOptions.viewportId;\n\n  const {\n    displaySetService,\n    toolGroupService,\n    segmentationService,\n    uiNotificationService,\n    customizationService,\n  } = servicesManager.services;\n\n  const toolGroupId = `${SEG_TOOLGROUP_BASE_NAME}-${viewportId}`;\n\n  // SEG viewport will always have a single display set\n  if (displaySets.length > 1) {\n    throw new Error('SEG viewport should only have a single display set');\n  }\n\n  const segDisplaySet = displaySets[0];\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n\n  // States\n  const [selectedSegment, setSelectedSegment] = useState(1);\n\n  // Hydration means that the SEG is opened and segments are loaded into the\n  // segmentation panel, and SEG is also rendered on any viewport that is in the\n  // same frameOfReferenceUID as the referencedSeriesUID of the SEG. However,\n  // loading basically means SEG loading over network and bit unpacking of the\n  // SEG data.\n  const [isHydrated, setIsHydrated] = useState(segDisplaySet.isHydrated);\n  const [segIsLoading, setSegIsLoading] = useState(!segDisplaySet.isLoaded);\n  const [element, setElement] = useState(null);\n  const [processingProgress, setProcessingProgress] = useState({\n    percentComplete: null,\n    totalSegments: null,\n  });\n\n  // refs\n  const referencedDisplaySetRef = useRef(null);\n\n  const { viewports, activeViewportId } = viewportGrid;\n\n  const referencedDisplaySet = segDisplaySet.getReferenceDisplaySet();\n  const referencedDisplaySetMetadata = _getReferencedDisplaySetMetadata(\n    referencedDisplaySet,\n    segDisplaySet\n  );\n\n  referencedDisplaySetRef.current = {\n    displaySet: referencedDisplaySet,\n    metadata: referencedDisplaySetMetadata,\n  };\n  /**\n   * OnElementEnabled callback which is called after the cornerstoneExtension\n   * has enabled the element. Note: we delegate all the image rendering to\n   * cornerstoneExtension, so we don't need to do anything here regarding\n   * the image rendering, element enabling etc.\n   */\n  const onElementEnabled = evt => {\n    setElement(evt.detail.element);\n  };\n\n  const onElementDisabled = () => {\n    setElement(null);\n  };\n\n  const storePresentationState = useCallback(() => {\n    viewportGrid?.viewports.forEach(({ viewportId }) => {\n      commandsManager.runCommand('storePresentation', {\n        viewportId,\n      });\n    });\n  }, [viewportGrid]);\n\n  const getCornerstoneViewport = useCallback(() => {\n    const { component: Component } = extensionManager.getModuleEntry(\n      '@ohif/extension-cornerstone.viewportModule.cornerstone'\n    );\n\n    const { displaySet: referencedDisplaySet } = referencedDisplaySetRef.current;\n\n    // Todo: jump to the center of the first segment\n    return (\n      <Component\n        {...props}\n        displaySets={[referencedDisplaySet, segDisplaySet]}\n        viewportOptions={{\n          viewportType: 'volume',\n          toolGroupId: toolGroupId,\n          orientation: viewportOptions.orientation,\n          viewportId: viewportOptions.viewportId,\n        }}\n        onElementEnabled={onElementEnabled}\n        onElementDisabled={onElementDisabled}\n        // initialImageIndex={initialImageIndex}\n      ></Component>\n    );\n  }, [viewportId, segDisplaySet, toolGroupId]);\n\n  const onSegmentChange = useCallback(\n    direction => {\n      direction = direction === 'left' ? -1 : 1;\n      const segmentationId = segDisplaySet.displaySetInstanceUID;\n      const segmentation = segmentationService.getSegmentation(segmentationId);\n\n      const { segments } = segmentation;\n\n      const numberOfSegments = Object.keys(segments).length;\n\n      let newSelectedSegmentIndex = selectedSegment + direction;\n\n      // Segment 0 is always background\n\n      if (newSelectedSegmentIndex > numberOfSegments - 1) {\n        newSelectedSegmentIndex = 1;\n      } else if (newSelectedSegmentIndex === 0) {\n        newSelectedSegmentIndex = numberOfSegments - 1;\n      }\n\n      segmentationService.jumpToSegmentCenter(segmentationId, newSelectedSegmentIndex, toolGroupId);\n      setSelectedSegment(newSelectedSegmentIndex);\n    },\n    [selectedSegment]\n  );\n\n  useEffect(() => {\n    if (segIsLoading) {\n      return;\n    }\n\n    promptHydrateSEG({\n      servicesManager,\n      viewportId,\n      segDisplaySet,\n      preHydrateCallbacks: [storePresentationState],\n      hydrateSEGDisplaySet,\n    }).then(isHydrated => {\n      if (isHydrated) {\n        setIsHydrated(true);\n      }\n    });\n  }, [servicesManager, viewportId, segDisplaySet, segIsLoading]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENTATION_LOADING_COMPLETE,\n      evt => {\n        if (evt.segDisplaySet.displaySetInstanceUID === segDisplaySet.displaySetInstanceUID) {\n          setSegIsLoading(false);\n        }\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  useEffect(() => {\n    const { unsubscribe } = segmentationService.subscribe(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      ({ percentComplete, numSegments }) => {\n        setProcessingProgress({\n          percentComplete,\n          totalSegments: numSegments,\n        });\n      }\n    );\n\n    return () => {\n      unsubscribe();\n    };\n  }, [segDisplaySet]);\n\n  /**\n   Cleanup the SEG viewport when the viewport is destroyed\n   */\n  useEffect(() => {\n    const onDisplaySetsRemovedSubscription = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_REMOVED,\n      ({ displaySetInstanceUIDs }) => {\n        const activeViewport = viewports.get(activeViewportId);\n        if (displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)) {\n          viewportGridService.setDisplaySetsForViewport({\n            viewportId: activeViewportId,\n            displaySetInstanceUIDs: [],\n          });\n        }\n      }\n    );\n\n    return () => {\n      onDisplaySetsRemovedSubscription.unsubscribe();\n    };\n  }, []);\n\n  useEffect(() => {\n    let toolGroup = toolGroupService.getToolGroup(toolGroupId);\n\n    if (toolGroup) {\n      return;\n    }\n\n    // This creates a custom tool group which has the lifetime of this view\n    // only, and does NOT interfere with currently displayed segmentations.\n    toolGroup = createSEGToolGroupAndAddTools(toolGroupService, customizationService, toolGroupId);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\n\n      // Only destroy the viewport specific implementation\n      toolGroupService.destroyToolGroup(toolGroupId);\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsHydrated(segDisplaySet.isHydrated);\n\n    return () => {\n      // remove the segmentation representations if seg displayset changed\n      segmentationService.removeSegmentationRepresentationFromToolGroup(toolGroupId);\n      referencedDisplaySetRef.current = null;\n    };\n  }, [segDisplaySet]);\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  let childrenWithProps = null;\n\n  if (\n    !referencedDisplaySetRef.current ||\n    referencedDisplaySet.displaySetInstanceUID !==\n      referencedDisplaySetRef.current.displaySet.displaySetInstanceUID\n  ) {\n    return null;\n  }\n\n  if (children && children.length) {\n    childrenWithProps = children.map((child, index) => {\n      return (\n        child &&\n        React.cloneElement(child, {\n          viewportId,\n          key: index,\n        })\n      );\n    });\n  }\n\n  const {\n    PatientID,\n    PatientName,\n    PatientSex,\n    PatientAge,\n    SliceThickness,\n    ManufacturerModelName,\n    StudyDate,\n    SeriesDescription,\n    SpacingBetweenSlices,\n  } = referencedDisplaySetRef.current.metadata;\n\n  const hydrateSEGDisplaySet = ({ segDisplaySet, viewportId }) => {\n    commandsManager.runCommand('loadSegmentationDisplaySetsForViewport', {\n      displaySets: [segDisplaySet],\n      viewportId,\n    });\n  };\n\n  const onStatusClick = async () => {\n    // Before hydrating a SEG and make it added to all viewports in the grid\n    // that share the same frameOfReferenceUID, we need to store the viewport grid\n    // presentation state, so that we can restore it after hydrating the SEG. This is\n    // required if the user has changed the viewport (other viewport than SEG viewport)\n    // presentation state (w/l and invert) and then opens the SEG. If we don't store\n    // the presentation state, the viewport will be reset to the default presentation\n    storePresentationState();\n    const isHydrated = await hydrateSEGDisplaySet({\n      segDisplaySet,\n      viewportId,\n    });\n\n    setIsHydrated(isHydrated);\n  };\n  return (\n    <>\n      <ViewportActionBar\n        onDoubleClick={evt => {\n          evt.stopPropagation();\n          evt.preventDefault();\n        }}\n        onArrowsClick={onSegmentChange}\n        getStatusComponent={() => {\n          return _getStatusComponent({\n            isHydrated,\n            onStatusClick,\n          });\n        }}\n        studyData={{\n          label: viewportLabel,\n          useAltStyling: true,\n          studyDate: formatDate(StudyDate),\n          seriesDescription: `SEG Viewport ${SeriesDescription}`,\n          patientInformation: {\n            patientName: PatientName ? OHIF.utils.formatPN(PatientName.Alphabetic) : '',\n            patientSex: PatientSex || '',\n            patientAge: PatientAge || '',\n            MRN: PatientID || '',\n            thickness: SliceThickness ? utils.roundNumber(SliceThickness, 2) : '',\n            thicknessUnits: SliceThickness !== undefined ? 'mm' : '',\n            spacing:\n              SpacingBetweenSlices !== undefined ? utils.roundNumber(SpacingBetweenSlices, 2) : '',\n            scanner: ManufacturerModelName || '',\n          },\n        }}\n      />\n\n      <div className=\"relative flex h-full w-full flex-row overflow-hidden\">\n        {segIsLoading && (\n          <LoadingIndicatorTotalPercent\n            className=\"h-full w-full\"\n            totalNumbers={processingProgress.totalSegments}\n            percentComplete={processingProgress.percentComplete}\n            loadingText=\"Loading SEG...\"\n          />\n        )}\n        {getCornerstoneViewport()}\n        {childrenWithProps}\n      </div>\n    </>\n  );\n}\n\nOHIFCornerstoneSEGViewport.propTypes = {\n  displaySets: PropTypes.arrayOf(PropTypes.object),\n  viewportId: PropTypes.string.isRequired,\n  dataSource: PropTypes.object,\n  children: PropTypes.node,\n  customProps: PropTypes.object,\n};\n\nOHIFCornerstoneSEGViewport.defaultProps = {\n  customProps: {},\n};\n\nfunction _getReferencedDisplaySetMetadata(referencedDisplaySet, segDisplaySet) {\n  const { SharedFunctionalGroupsSequence } = segDisplaySet.instance;\n\n  const SharedFunctionalGroup = Array.isArray(SharedFunctionalGroupsSequence)\n    ? SharedFunctionalGroupsSequence[0]\n    : SharedFunctionalGroupsSequence;\n\n  const { PixelMeasuresSequence } = SharedFunctionalGroup;\n\n  const PixelMeasures = Array.isArray(PixelMeasuresSequence)\n    ? PixelMeasuresSequence[0]\n    : PixelMeasuresSequence;\n\n  const { SpacingBetweenSlices, SliceThickness } = PixelMeasures;\n\n  const image0 = referencedDisplaySet.images[0];\n  const referencedDisplaySetMetadata = {\n    PatientID: image0.PatientID,\n    PatientName: image0.PatientName,\n    PatientSex: image0.PatientSex,\n    PatientAge: image0.PatientAge,\n    SliceThickness: image0.SliceThickness || SliceThickness,\n    StudyDate: image0.StudyDate,\n    SeriesDescription: image0.SeriesDescription,\n    SeriesInstanceUID: image0.SeriesInstanceUID,\n    SeriesNumber: image0.SeriesNumber,\n    ManufacturerModelName: image0.ManufacturerModelName,\n    SpacingBetweenSlices: image0.SpacingBetweenSlices || SpacingBetweenSlices,\n  };\n\n  return referencedDisplaySetMetadata;\n}\n\nexport default OHIFCornerstoneSEGViewport;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Icon, Tooltip } from '@ohif/ui';\n\nexport default function _getStatusComponent({ isHydrated, onStatusClick }) {\n  let ToolTipMessage = null;\n  let StatusIcon = null;\n\n  const { t } = useTranslation('Common');\n  const loadStr = t('LOAD');\n\n  switch (isHydrated) {\n    case true:\n      StatusIcon = () => <Icon name=\"status-alert\" />;\n\n      ToolTipMessage = () => <div>This Segmentation is loaded in the segmentation panel</div>;\n      break;\n    case false:\n      StatusIcon = () => (\n        <Icon\n          className=\"text-aqua-pale\"\n          name=\"status-untracked\"\n        />\n      );\n\n      ToolTipMessage = () => <div>Click LOAD to load segmentation.</div>;\n  }\n\n  const StatusArea = () => (\n    <div className=\"flex h-6 cursor-default text-sm leading-6 text-white\">\n      <div className=\"bg-customgray-100 flex min-w-[45px] items-center rounded-l-xl rounded-r p-1\">\n        <StatusIcon />\n        <span className=\"ml-1\">SEG</span>\n      </div>\n      {!isHydrated && (\n        <div\n          className=\"bg-primary-main hover:bg-primary-light ml-1 cursor-pointer rounded px-1.5 hover:text-black\"\n          // Using onMouseUp here because onClick is not working when the viewport is not active and is styled with pointer-events:none\n          onMouseUp={onStatusClick}\n        >\n          {loadStr}\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {ToolTipMessage && (\n        <Tooltip\n          content={<ToolTipMessage />}\n          position=\"bottom-left\"\n        >\n          <StatusArea />\n        </Tooltip>\n      )}\n      {!ToolTipMessage && <StatusArea />}\n    </>\n  );\n}\n"],"names":["ToolGroupService","customizationService","toolGroupId","tools","get","createToolGroupAndAddTools","RESPONSE","NO_NEVER","CANCEL","HYDRATE_SEG","servicesManager","segDisplaySet","viewportId","preHydrateCallbacks","hydrateSEGDisplaySet","uiViewportDialogService","services","Promise","async","resolve","reject","promptResult","message","actions","type","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askHydrate","forEach","callback","formatDate","utils","OHIFCornerstoneSEGViewport","props","children","displaySets","viewportOptions","viewportLabel","extensionManager","commandsManager","t","useTranslation","displaySetService","toolGroupService","segmentationService","uiNotificationService","length","Error","viewportGrid","viewportGridService","useViewportGrid","selectedSegment","setSelectedSegment","useState","isHydrated","setIsHydrated","segIsLoading","setSegIsLoading","isLoaded","element","setElement","processingProgress","setProcessingProgress","percentComplete","totalSegments","referencedDisplaySetRef","useRef","viewports","activeViewportId","referencedDisplaySet","getReferenceDisplaySet","referencedDisplaySetMetadata","SharedFunctionalGroupsSequence","instance","SharedFunctionalGroup","Array","isArray","PixelMeasuresSequence","PixelMeasures","SpacingBetweenSlices","SliceThickness","image0","images","PatientID","PatientName","PatientSex","PatientAge","StudyDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","ManufacturerModelName","_getReferencedDisplaySetMetadata","current","displaySet","metadata","onElementEnabled","evt","detail","onElementDisabled","storePresentationState","useCallback","runCommand","getCornerstoneViewport","component","Component","getModuleEntry","React","_extends","viewportType","orientation","onSegmentChange","direction","segmentationId","displaySetInstanceUID","segmentation","getSegmentation","segments","numberOfSegments","Object","keys","newSelectedSegmentIndex","jumpToSegmentCenter","useEffect","promptHydrateSEG","then","unsubscribe","subscribe","EVENTS","SEGMENTATION_LOADING_COMPLETE","SEGMENT_LOADING_COMPLETE","numSegments","onDisplaySetsRemovedSubscription","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","includes","setDisplaySetsForViewport","toolGroup","getToolGroup","createSEGToolGroupAndAddTools","removeSegmentationRepresentationFromToolGroup","destroyToolGroup","childrenWithProps","map","child","index","key","onStatusClick","ViewportActionBar","onDoubleClick","stopPropagation","preventDefault","onArrowsClick","getStatusComponent","ToolTipMessage","StatusIcon","loadStr","Icon","name","className","StatusArea","onMouseUp","Tooltip","content","position","_getStatusComponent","studyData","label","useAltStyling","studyDate","seriesDescription","patientInformation","patientName","OHIF","formatPN","Alphabetic","patientSex","patientAge","MRN","thickness","roundNumber","thicknessUnits","undefined","spacing","scanner","LoadingIndicatorTotalPercent","totalNumbers","loadingText","propTypes","PropTypes","isRequired","dataSource","customProps","defaultProps"],"sourceRoot":""}