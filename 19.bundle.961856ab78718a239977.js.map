{"version":3,"file":"19.bundle.961856ab78718a239977.js","mappings":"6LAGA,MAAMA,GACO,EADPA,EAEI,EAFJA,EAGW,EAHXA,EAIQ,EAJRA,EAKkB,EALlBA,EAMe,EANfA,EAOY,EAGZC,EAAuB,CAC3BC,GAAI,sBACJC,QAAS,OACTC,QAAS,CACPC,iBAAkB,KAClBC,aAAc,GACdC,cAAe,GACfC,cAAe,GAEfC,iBAAkB,GAClBC,kBAAmB,GACnBC,kBAAmB,GAEnBC,4BAA6B,GAC7BC,SAAS,GAEXC,OAAQ,CACNC,IAAK,CACHC,KAAM,SAERC,KAAM,CACJC,MAAO,eACPC,GAAI,CACFC,aAAc,sBAEdC,mBAAoB,CAClB,CACEC,OAAQ,WACRC,QAAS,CAAC,mCAAoC,uBAGlDC,kBAAmB,CACjBF,OAAQ,gCACRG,KAAM,qCAERC,0BAA2B,gCAC3BC,WAAY,0BACZC,0BAA2B,CACzBL,SAASM,EAAAA,EAAAA,IAAO,CACdxB,iBAAkBA,CAACyB,EAAGC,IAAUA,EAAM1B,sBAK9C2B,oBAAqB,CACnBC,OAAQ,CACNC,IAAK,sBACLC,OAAQ,CACN,CACEb,OAAQ,WACRC,QAAS,CAAC,2BAA4B,cACtCE,KAAM,2BAER,CACEH,OAAQ,MACRG,KAAM,qBAER,CACEH,OAAQ,SAGZc,QAAS,CACPd,OAAQ,UAIde,SAAU,CACRlB,GAAI,CACFC,aAAc,CACZ,CACEE,OAAQ,sBACRG,KAAM,cAER,CACEH,OAAQ,uBACRG,KAAM,gBAGVa,eAAgB,CACd,CACEhB,OAAQ,WACRC,QAAS,CAAC,sBAAuB,cACjCE,KAAM,6BAER,CACEH,OAAQ,SAGZD,mBAAoB,CAClB,CACEC,OAAQ,WACRC,QAAS,CAAC,sCAGdgB,YAAa,mBACbC,UAAW,CACT,CACElB,OAAQ,WACRC,QAAS,CAAC,cACVE,KAAM,kBAER,CACEH,OAAQ,eAKhBmB,qBAAsB,CACpBR,OAAQ,CACNC,IAAK,uBACLC,OAAQ,CACN,CACEb,OAAQ,WACRC,QAAS,CAAC,mBAAoB,cAC9BE,KAAM,mBAER,CACEH,OAAQ,WACRC,QAAS,CACP,uCACA,2BACA,cAEFE,KAAM,2BAER,CACEH,OAAQ,mBACRG,KAAM,0BAER,CACEH,OAAQ,aAGZc,QAAS,CACPd,OAAQ,UAIdoB,oBAAqB,CACnBT,OAAQ,CACNC,IAAK,sBACLC,OAAQ,CACN,CACEb,OAAQ,WACRC,QAAS,CACP,uCACA,2BACA,cAEFE,KAAM,2BAER,CACEH,OAAQ,WACRC,QAAS,CAAC,gBACVE,KAAM,0BAER,CACEH,OAAQ,mBACRG,KAAM,0BAER,CACEH,OAAQ,aAGZc,QAAS,CACPd,OAAQ,UAIdqB,iBAAkB,CAChBV,OAAQ,CACNC,IAAK,mBACLC,OAAQ,CAIN,CACEb,OAAQ,OACRC,QAAS,CAAC,uBAAwB,kDAClCE,KAAM,uCAKR,CACEH,OAAQ,WACRC,QAAS,CAAC,uCAAwC,4BAClDE,KAAM,+BAGR,CACEH,OAAQ,aAGZc,QAAS,CACPd,OAAQ,UAIdsB,8BAA+B,CAC7BX,OAAQ,CACNC,IAAK,gCACLC,OAAQ,CACN,CACEb,OAAQ,WACRC,QAAS,CACP,mCACA,yCACA,qBAEFE,KAAM,iCAER,CACEH,OAAQ,OACRC,QAAS,CAAC,8BACVE,KAAM,+BAGVW,QAAS,CACPd,OAAQ,UAIduB,wBAAyB,CACvBZ,OAAQ,CACNC,IAAK,0BACLC,OAAQ,CACN,CACEb,OAAQ,WACRC,QAAS,CACP,mCACA,yCACA,uBAINa,QAAS,CACPd,OAAQ,WAKhBwB,QAAQ,GAGJC,EAAiB,CACrBC,SAAU,CACRhB,oBAAqBA,CAACiB,EAAKC,KAANlB,EAGrBU,oBAAqBA,CAACO,EAAKC,KAANR,EAGrBD,qBAAsBA,CAACQ,EAAKC,KAANT,GAIxBlB,QAAS,CACP4B,qCAAsCA,CAACF,EAAKC,KAC1CE,QAAQC,IAAI,wDAAwD,EAEtEC,qBAAsBA,CAACL,EAAKC,KAC1BE,QAAQC,IAAI,wCAAwC,EAEtDE,uCAAwCA,CAACN,EAAKC,KAC5CE,QAAQI,KAAK,0DAA0D,EAEzEC,+CAAgDA,CAACR,EAAKC,KACpDE,QAAQI,KAAK,kEAAkE,EAEjFE,cAAc7B,EAAAA,EAAAA,IAAO,CACnBvB,aAAc,GACdC,cAAe,GACfC,cAAe,GACfC,iBAAkB,GAClBC,kBAAmB,GACnBC,kBAAmB,KAGrBgD,0BAA0B9B,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CAC7CzC,iBAAkBwC,EAAI3C,aACtBI,kBAAmBuC,EAAI1C,cAAcqD,QACrCjD,kBAAmBsC,EAAIzC,cAAcoD,QAErCtD,aAAc4C,EAAIW,KAAKC,iBACvBvD,cAAe,CAAC2C,EAAIW,KAAKE,mBACzBvD,cAAe,OAEjBwD,kCAAkCnC,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAC7C,MAAMe,EAAmBf,EAAIY,kBAAoBZ,EAAIW,KAAKC,iBACpDI,EAAqBhB,EAAIiB,oBAAsBjB,EAAIW,KAAKM,mBAE9D,MAAO,CACL1D,iBAAkBwC,EAAI3C,aACtBI,kBAAmBuC,EAAI1C,cAAcqD,QACrCjD,kBAAmBsC,EAAIzC,cAAcoD,QAErCtD,aAAc2D,EACd1D,cAAe,IAAI0C,EAAI1C,iBAAkB2D,GACzC1D,cAAe,GAChB,IAEH4D,mBAAmBvC,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CACtCrC,SAAS,MAEXwD,YAAYxC,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CAC/BrC,SAAS,MAEXyD,cAAczC,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CACjCvC,kBAAmB,IAAIsC,EAAIzC,eAC3BA,cAAe,IAAIyC,EAAIzC,cAAe0C,EAAIW,KAAKE,uBAEjDQ,4BAA4B1C,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CAC/CtC,4BAA6B,IACxBqC,EAAIrC,4BACPsC,EAAIW,KAAKW,yBAGbC,kBAAkB5C,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CACrCxC,kBAAmB,IAAIuC,EAAI1C,eAC3BA,cAAe,IAAI0C,EAAI1C,cAAe2C,EAAIW,KAAKE,uBAEjDW,qBAAqB7C,EAAAA,EAAAA,KAAO,CAACoB,EAAKC,KAAQ,CACxCxC,kBAAmBuC,EAAI1C,cAAcqD,QAAQe,QAAOC,GAAOA,IAAQ1B,EAAIa,oBACvExD,cAAe0C,EAAI1C,cAAcqD,QAAQe,QAAOC,GAAOA,IAAQ1B,EAAIa,yBAGvEc,OAAQ,CAkBNC,eAAgBA,CAAC7B,EAAKC,SAGQ6B,IAA1B7B,EAAIa,mBAAmCd,EAAI1C,cAAcyE,SAAS9B,EAAIa,mBAG1EkB,kBAAmBA,CAAChC,EAAKC,IAAQA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EACvEmF,gBAAiBA,CAAClC,EAAKC,IAAQA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EACrEoF,wBAAyBA,CAACnC,EAAKC,IAC7BA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EACxCqF,uBAAwBA,CAACpC,EAAKC,IAC5BA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EACxCsF,uBAAwBA,CAACrC,EAAKC,IAC5BA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EACxCuF,2BAA4BA,CAACtC,EAAKC,IAAQA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EAChFwF,oCAAqCA,CAACvC,EAAKC,IACzCA,EAAIW,MACJX,EAAIW,KAAKqB,eAAiBlF,IACA,IAA1BkD,EAAIW,KAAK4B,aACXC,4BAA6BA,CAACzC,EAAKC,IACjCA,EAAIW,MACJX,EAAIW,KAAKqB,eAAiBlF,IACA,IAA1BkD,EAAIW,KAAK4B,aACXE,8BAA+BA,CAAC1C,EAAKC,IACnCA,EAAIW,MAAQX,EAAIW,KAAKqB,eAAiBlF,EAGxC4F,0BAA2BA,CAAC3C,EAAKC,IAC/BD,EAAI1C,cAAcsF,OAAS,IAAM5C,EAAI1C,cAAcyE,SAAS9B,EAAIa,mBAClE+B,kCAAmCA,CAAC7C,EAAKC,KAC/BD,EAAIrC,4BAA4BoE,SAAS9B,EAAIa,mBAEvDgC,WAAYA,CAAC9C,EAAKC,KACfD,EAAIzC,cAAcwE,SAAS9B,EAAIa,oBAChCd,EAAI3C,eAAiB4C,EAAIY,iBAC3BkC,YAAaA,CAAC/C,EAAKC,KAChBD,EAAIzC,cAAcwE,SAAS9B,EAAIa,qBAC/Bd,EAAI1C,cAAcyE,SAAS9B,EAAIa,qB,eCxYtC,MAAM/D,EAAW,CACfiG,UAAW,EACXC,OAAQ,EACRC,cAAe,EACfC,WAAY,EACZC,qBAAsB,GA8DxB,QA3DA,UAA6B,gBAAEC,EAAe,iBAAEC,GAAoBtD,EAAKC,GACvE,MAAM,wBAAEsD,GAA4BF,EAAgBtD,UAC9C,WAAEyD,EAAU,iBAAE3C,EAAgB,kBAAEC,GAAsBb,EAE5D,OAAO,IAAIwD,SAAQC,eAAgBC,EAASC,GAC1C,IAAIC,QAWR,SAA+BN,EAAyBC,GACtD,OAAO,IAAIC,SAAQ,SAAUE,EAASC,GACpC,MAAME,EAAUC,EAAAA,EAAKC,EAAE,wDACjB1F,EAAU,CACd,CACErB,GAAI,+BACJc,KAAMkG,EAAAA,GAAAA,GAAiBC,UACvBC,KAAMJ,EAAAA,EAAKC,EAAE,aACbI,MAAOrH,EAASkG,QAElB,CACEhG,GAAI,4CACJc,KAAMkG,EAAAA,GAAAA,GAAiBC,UACvBC,KAAMJ,EAAAA,EAAKC,EAAE,yCACbI,MAAOrH,EAASiG,UAElB,CACE/F,GAAI,4BACJc,KAAMkG,EAAAA,GAAAA,GAAiBI,QACvBF,KAAMJ,EAAAA,EAAKC,EAAE,cACbI,MAAOrH,EAASqG,uBAGdkB,EAAWC,IACfhB,EAAwBiB,OACxBb,EAAQY,EAAO,EAGjBhB,EAAwBkB,KAAK,CAC3BjB,aACAvG,GAAI,6CACJc,KAAM,OACN+F,UACAxF,UACAgG,WACAI,eAAgBA,KACdnB,EAAwBiB,OACxBb,EAAQ5G,EAASkG,OAAO,GAG9B,GACF,CApD6B0B,CAAsBpB,EAAyBC,GAExEG,EAAQ,CACN1B,aAAc4B,EACdhD,mBACAC,oBACA0C,cAEJ,GACF,ECvBMzG,EAAW,CACfiG,UAAW,EACXC,OAAQ,EACRC,cAAe,EACfC,WAAY,EACZC,qBAAsB,EACtBwB,kBAAmB,GAqGrB,QAlGA,UAA8B,gBAAEvB,EAAe,iBAAEC,GAAoBtD,EAAKC,GACxE,MAAM,wBAAE4E,GAA4BxB,EAAgBtD,UAC9C,WAAEyD,EAAU,iBAAE3C,EAAgB,kBAAEC,GAAsBb,EAE5D,OAAO,IAAIwD,SAAQC,eAAgBC,EAASC,GAC1C,IAAIC,QAkBR,SAAmCN,EAAyBC,GAC1D,OAAO,IAAIC,SAAQ,SAAUE,EAASC,GACpC,MAAME,EAAU,8DACVxF,EAAU,CACd,CACEP,KAAMkG,EAAAA,GAAAA,GAAiBC,UACvBC,KAAM,SACNC,MAAOrH,EAASkG,QAElB,CACElF,KAAMkG,EAAAA,GAAAA,GAAiBI,QACvBF,KAAM,oBACNC,MAAOrH,EAASmG,eAElB,CACEnF,KAAMkG,EAAAA,GAAAA,GAAiBI,QACvBF,KAAM,yBACNC,MAAOrH,EAASoG,aAGdmB,EAAWC,IACfhB,EAAwBiB,OACxBb,EAAQY,EAAO,EAGjBhB,EAAwBkB,KAAK,CAC3BjB,aACAzF,KAAM,OACN+F,UACAxF,UACAgG,WACAI,eAAgBA,KACdnB,EAAwBiB,OACxBb,EAAQ5G,EAASkG,OAAO,GAG9B,GACF,CAvD6B6B,CAA0BD,EAAyBrB,GAExEK,IAAiB9G,EAASmG,gBAC5BW,EAAe7D,EAAIpC,cAsDzB,SAAiCiH,EAAyBrB,GACxD,OAAO,IAAIC,SAAQ,SAAUE,EAASC,GACpC,MAAME,EACJ,6GACIxF,EAAU,CACd,CAAEP,KAAM,SAAUoG,KAAM,SAAUC,MAAOrH,EAASkG,QAClD,CACElF,KAAM,YACNoG,KAAM,OACNC,MAAOrH,EAASmG,eAElB,CACEnF,KAAM,UACNoG,KAAM,UACNC,MAAOrH,EAASqG,uBAGdkB,EAAWC,IACfM,EAAwBL,OACxBb,EAAQY,EAAO,EAGjBM,EAAwBJ,KAAK,CAC3BjB,aACAzF,KAAM,UACN+F,UACAxF,UACAgG,WACAI,eAAgBA,KACdG,EAAwBL,OACxBb,EAAQ5G,EAASkG,OAAO,GAG9B,GACF,CAvFgB8B,CAAwBF,EAAyBrB,GACvDzG,EAASqG,sBAGfO,EAAQ,CACN1B,aAAc4B,EACdhD,mBACAC,oBACA0C,aACAhB,cAAc,GAElB,GACF,EC9BMzF,EAAW,CACfiG,UAAW,EACXC,OAAQ,EACRC,cAAe,EACfC,WAAY,EACZC,qBAAsB,EACtBwB,kBAAmB,GAiGrB,QA9FA,UAA6B,gBAAEvB,EAAe,iBAAEC,GAAoBtD,EAAKC,GACvE,MAAM,wBAAE4E,GAA4BxB,EAAgBtD,UAC9C,WAAEyD,EAAU,iBAAE3C,EAAgB,kBAAEC,GAAsBb,EAE5D,OAAO,IAAIwD,SAAQC,eAAgBC,EAASC,GAC1C,IAAIC,QAkBR,SAA+BgB,EAAyBrB,GACtD,OAAO,IAAIC,SAAQ,SAAUE,EAASC,GACpC,MAAME,EAAUC,EAAAA,EAAKC,EAAE,wDACjB1F,EAAU,CACd,CAAEP,KAAM,SAAUoG,KAAMJ,EAAAA,EAAKC,EAAE,uBAAwBI,MAAOrH,EAASkG,QACvE,CACElF,KAAM,YACNoG,KAAMJ,EAAAA,EAAKC,EAAE,yCACbI,MAAOrH,EAAS6H,mBAElB,CACE7G,KAAM,UACNoG,KAAMJ,EAAAA,EAAKC,EAAE,wBACbI,MAAOrH,EAASqG,uBAGdkB,EAAWC,IACfM,EAAwBL,OACxBb,EAAQY,EAAO,EAGjBM,EAAwBJ,KAAK,CAC3BjB,aACAzF,KAAM,OACN+F,UACAxF,UACAgG,WACAI,eAAgBA,KACdG,EAAwBL,OACxBb,EAAQ5G,EAASkG,OAAO,GAG9B,GACF,CAnD6B0B,CAAsBE,EAAyBrB,GAEpEK,IAAiB9G,EAASqG,uBAC5BS,EAAe7D,EAAIpC,cAkDzB,SAAiCiH,EAAyBrB,GACxD,OAAO,IAAIC,SAAQ,SAAUE,EAASC,GACpC,MAAME,EACJ,mGACIxF,EAAU,CACd,CAAEP,KAAM,SAAUoG,KAAM,SAAUC,MAAOrH,EAASkG,QAClD,CACElF,KAAM,YACNoG,KAAM,uDACNC,MAAOrH,EAASqG,sBAElB,CACErF,KAAM,UACNoG,KAAM,MACNC,MAAOrH,EAASmG,gBAGdoB,EAAWC,IACfM,EAAwBL,OACxBb,EAAQY,EAAO,EAGjBM,EAAwBJ,KAAK,CAC3BjB,aACAzF,KAAM,UACN+F,UACAxF,UACAgG,WACAI,eAAgBA,KACdG,EAAwBL,OACxBb,EAAQ5G,EAASkG,OAAO,GAG9B,GACF,CAnFgB8B,CAAwBF,EAAyBrB,GACvDzG,EAASqG,sBAGfO,EAAQ,CACN1B,aAAc4B,EACdhD,mBACAC,oBACA0C,aACAhB,cAAc,GAElB,GACF,E,eChCA,MAAMwC,EAAuB,KCA7B,MASA,EATiB,CACfhC,UAAW,EACXC,OAAQ,EACRC,cAAe,EACfC,WAAY,EACZC,qBAAsB,EACtBwB,kBAAmB,GCgErB,QAlEA,UAA0B,gBAAEvB,EAAe,gBAAE4B,EAAe,iBAAE3B,GAAoBtD,EAAKC,GACrF,MAAM,gBAAEiF,EAAe,mBAAEC,EAAkB,kBAAEC,GAAsB/B,EAAgBtD,SAC7EyD,OAAgC1B,IAAnB7B,EAAIuD,WAA2BvD,EAAIW,KAAK4C,WAAavD,EAAIuD,WACtEhB,OAAoCV,IAArB7B,EAAIuC,aAA6BvC,EAAIW,KAAK4B,aAAevC,EAAIuC,aAC5E3B,EAAmBZ,GAAKW,MAAMC,iBAC9BC,EAAoBb,GAAKW,MAAME,mBAE/B,aAAEzD,EAAY,cAAEC,GAAkB0C,EACxC,IAAIqF,EAEJ,OAAO,IAAI5B,SAAQC,eAAgBC,EAASC,GAE1C,MAAMC,QAAqByB,EAAAA,EAAAA,0BAAyBJ,EAAiB,CACnE5B,qBAGF,GAAIO,EAAa0B,SAAWxI,EAASmG,cAAe,CAClD,MACMsC,EADclC,EAAiBmC,iBACN,GAEzBC,EADeP,EAAmBQ,kBACCjE,QACvCkE,GAAKvI,IAAiBuI,EAAEC,mBAAqBvI,EAAcyE,SAAS6D,EAAEE,sBAGlEC,OAEmBjE,IAAvB+B,EAAaO,OAA8C,KAAvBP,EAAaO,MAC7C,0BACAP,EAAaO,MAEb4B,EFhCG,SAA+BZ,GAC5C,MAEMa,EAFoBb,EAAkBc,uBACJxE,QAAOyE,GAAsB,OAAhBA,EAAGC,WAClBC,KAAIF,GAAMA,EAAGH,eAGnD,OAFwBM,KAAKC,OAAON,EAAiBjB,GAE5B,CAC3B,CEyB2BwB,CAAsBpB,GAErCqB,EAAY/C,SACTuB,EAAgByB,WACrB,oBACA,CACEC,gBAAiBjB,EACjBF,aACAoB,uBAAwB,CAAC,iBACzBC,QAAS,CACPd,oBACAC,iBAGJ,iCAGJX,QAA+ByB,EAAAA,EAAAA,mBAAkB,CAC/CzD,kBACAoD,aAEJ,MAAW5C,EAAa0B,OAIxB5B,EAAQ,CACN1B,aAAc4B,EAAa0B,OAC3BwB,8BAA+B1B,EAC/BxE,mBACAC,oBACA0C,aACAhB,gBAEJ,GACF,E,eCjEA,MAAMzF,EAAW,CACfiG,UAAW,EACXC,OAAQ,EACRC,cAAe,EACfC,WAAY,EACZC,qBAAsB,EACtBwB,kBAAmB,EACnBoC,eAAgB,GAsElB,QAnEA,UAAuC,gBAAE3D,EAAe,iBAAEC,EAAgB,UAAE2D,GAAajH,EAAKC,GAC5F,MAAM,wBAAEsD,EAAuB,kBAAE6B,GAAsB/B,EAAgBtD,UACjE,WAAEyD,EAAU,sBAAE0D,GAA0BjH,EACxCkH,EAAe/B,EAAkBgC,mBAAmBF,GAE1D,OAAO,IAAIzD,SAAQC,eAAgBC,EAASC,GAC1C,MAAMC,QA2BV,SAA+BN,EAAyBC,GACtD,OAAO,IAAIC,SAAQ,SAAUE,EAASC,GACpC,MAAME,EAAU,gEACVxF,EAAU,CACd,CACEP,KAAMkG,EAAAA,GAAAA,GAAiBC,UACvBC,KAAM,KACNC,MAAOrH,EAASkG,QAElB,CACElF,KAAMkG,EAAAA,GAAAA,GAAiBI,QACvBF,KAAM,MACNC,MAAOrH,EAASiK,iBAGd1C,EAAWC,IACfhB,EAAwBiB,OACxBb,EAAQY,EAAO,EAGjBhB,EAAwBkB,KAAK,CAC3BjB,aACAzF,KAAM,OACN+F,UACAxF,UACAgG,WACAI,eAAgBA,KACdnB,EAAwBiB,OACxBb,EAAQ5G,EAASkG,OAAO,GAG9B,GACF,CA3D+B0B,CAAsBpB,EAAyBC,GAG1E,IAAI3C,EAAkBK,EAEtB,GAAI2C,IAAiB9G,EAASiK,eAAgB,CAC5C7G,QAAQI,KAAK,kCACb,MAAM8G,GAAkBzH,EAAAA,EAAAA,yBACtB,CAAEyD,kBAAiBC,mBAAkB2D,aACrCC,GAGFrG,EAAmBwG,EAAgBxG,iBACnCK,EAAqBmG,EAAgBnG,kBACvC,CAEAyC,EAAQ,CACN1B,aAAc4B,EACdqD,sBAAuBjH,EAAIiH,sBAC3B3F,oBAAqB4F,EAAarG,kBAClC0C,aACA3C,mBACAK,sBAEJ,GACF,EClBA,QAxBA,UAAiC,gBAAEmC,EAAe,iBAAEC,EAAgB,UAAE2D,GAAajH,EAAKC,GACtF,MAAM,kBAAEmF,GAAsB/B,EAAgBtD,UACxC,WAAEyD,EAAU,sBAAE0D,GAA0BjH,EACxCkH,EAAe/B,EAAkBgC,mBAAmBF,GAE1D,OAAO,IAAIzD,SAAQ,CAACE,EAASC,KAC3B,MAAMyD,GAAkBC,EAAAA,EAAAA,yBACtB,CAAEjE,kBAAiBC,mBAAkB2D,aACrCC,GAGIrG,EAAmBwG,EAAgBxG,iBACnCK,EAAqBmG,EAAgBnG,mBAE3CyC,EAAQ,CACNuD,sBAAuBjH,EAAIiH,sBAC3B3F,oBAAqB4F,EAAarG,kBAClC0C,aACA3C,mBACAK,sBACA,GAEN,E,eCVA,MAAMqG,EAA6BC,EAAAA,gBACnCD,EAA2BE,YAAc,6BACzC,MAAMC,EAAyBA,KAAMC,EAAAA,EAAAA,YAAWJ,GAE1CK,EAAuB,sEAM7B,SAASC,GACP,gBAAExE,EAAe,gBAAE4B,EAAe,iBAAE3B,IACpC,SAAEwE,IAEF,MAAOb,IAAac,EAAAA,EAAAA,MAEbC,EAAcC,IAAuBC,EAAAA,EAAAA,OACtC,iBAAE9K,EAAgB,UAAE+K,GAAcH,GAClC,mBAAE7C,EAAkB,kBAAEC,GAAsB/B,EAAgBtD,SAE5DqI,EAAiBC,OAAOzJ,OAAO,CAAC,EAAGkB,GACzCsI,EAAe9J,QAAU+J,OAAOzJ,OAAO,CAAC,EAAGwJ,EAAe9J,QAAS,CACjEgC,uCAAwCA,CAACN,EAAKC,KAC5C,MAAM,aAAE5C,EAAY,cAAEC,EAAa,iBAAEF,GAAqB4C,EAEpD0F,EADeP,EAAmBQ,kBACCjE,QACvCkE,GAAKvI,IAAiBuI,EAAEC,mBAAqBvI,EAAcyE,SAAS6D,EAAEE,sBAGxE3F,QAAQC,IACN,wCACAhD,EACAsI,EAAoB,IAGtB,MAAM4C,EAA0B5C,EAAoB,GAAGwB,sBAGjDqB,EAFuBnD,EAAkBgC,mBAAmBkB,GAEpBE,OACxCC,EAAuBF,EAAiB,GAAGG,QAAQC,WAAW,YAE9DhC,EAAkBjB,EAAoB,GAAG9E,KAE/C,IAAIgI,EAAa,GACZH,GAAwB9B,IAG3BiC,EAAaL,EAAiBM,WAAUC,IACtC,MAAMC,EAAeV,OAAOW,KAAKrC,GAAiB,GAAGsC,UAAU,GAC/D,OAAOH,EAAMJ,UAAYK,CAAY,KAGnB,IAAhBH,IACFzI,QAAQI,KAAK,+DACbqI,EAAa,IAIjBX,EAAoBiB,0BAA0B,CAC5C1F,WAAYpG,EACZiI,uBAAwB,CAACiD,GACzBa,gBAAiB,CACfC,oBAAqB,CACnBC,MAAOT,KAGX,EAEJpI,+CAAgDA,CAACR,EAAKC,KACpD,GAAIA,EAAIW,KAAKmG,8BAA8BnE,OAAS,EAAG,CACrD,MAAM0G,EAAwCrJ,EAAIW,KAAKmG,8BAA8B,GAErFkB,EAAoBiB,0BAA0B,CAC5C1F,WAAYvD,EAAIW,KAAK4C,WACrB6B,uBAAwB,CAACiE,IAE7B,GAEFpJ,qCAAsCA,CAACF,EAAKC,KAC1C,MAIMsJ,EAJepE,EAAmBQ,kBACEjE,QAAO8H,GAC/CxJ,EAAIvC,kBAAkBsE,SAASyH,EAAG1D,sBAEQO,KAAIoD,GAAMA,EAAGxM,KAEzD,IAAK,IAAIyM,EAAI,EAAGA,EAAIH,EAAe3G,OAAQ8G,IACzCvE,EAAmBwE,OAAOJ,EAAeG,GAC3C,EAEFrJ,qBAAsBA,CAACL,EAAKC,KAC1B,MACMsJ,EADepE,EAAmBQ,kBACJU,KAAIoD,GAAMA,EAAGG,MAEjD,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAe3G,OAAQ8G,IACzCvE,EAAmBwE,OAAOJ,EAAeG,GAC3C,IAGJtB,EAAerI,SAAWsI,OAAOzJ,OAAO,CAAC,EAAGwJ,EAAerI,SAAU,CACnEhB,oBAAqBA,EAAoB8K,KAAK,KAAM,CAClDxG,kBACAC,mBACA2D,cAEFzH,qBAAsBA,EAAqBqK,KAAK,KAAM,CACpDxG,kBACAC,mBACA2D,cAEFxH,oBAAqBA,EAAoBoK,KAAK,KAAM,CAClDxG,kBACAC,mBACA2D,cAEFvH,iBAAkBA,EAAiBmK,KAAK,KAAM,CAC5CxG,kBACA4B,kBACA3B,mBACA2D,cAEFtH,8BAA+BA,EAA8BkK,KAAK,KAAM,CACtExG,kBACAC,mBACA2D,cAEFrH,wBAAyBA,EAAwBiK,KAAK,KAAM,CAC1DxG,kBACAC,mBACA2D,gBAaJ,MAAM6C,GAA6BC,EAAAA,EAAAA,GAAQ/M,EAAsBoL,IAE1D1C,EAAqBsE,IAAgCC,EAAAA,EAAAA,IAC1DH,GAmEF,OAhEAI,EAAAA,EAAAA,YAAU,KAERF,EAA6B,4BAA6B,CACxD5M,oBACA,GACD,CAACA,EAAkB4M,KAGtBE,EAAAA,EAAAA,YAAU,KACR,GAAI/B,EAAUgC,KAAO,EAAG,CACtB,MAAMC,EAAiBjC,EAAUkC,IAAIjN,GAErC,IAAKgN,IAAmBA,GAAgB/E,wBAAwBzC,OAC9D,OAKF,MAAM,kBAAEwC,GAAsB/B,EAAgBtD,SACxCuK,EAAalF,EAAkBgC,mBACnCgD,EAAe/E,uBAAuB,IAGxC,IAAKiF,EACH,OAiBAA,EAAWC,oBAAsB3C,IAChC0C,EAAWE,UACZF,EAAWG,MAEXH,EAAWG,OAMXH,EAAWC,oBAAsB3C,IACH,IAA9B0C,EAAWI,iBAEXvK,QAAQC,IAAI,mBAAoBsF,GAChCsE,EAA6B,oBAAqB,CAChD9C,sBAAuBoD,EAAWpD,sBAClCpG,kBAAmBwJ,EAAWxJ,kBAC9B0C,WAAYpG,IAGlB,IACC,CAACA,EAAkB4M,EAA8B3G,EAAgBtD,SAAUoI,IAG5EX,EAAAA,cAACD,EAA2BoD,SAAQ,CAClCvG,MAAO,CAACsB,EAAqBsE,IAE5BlC,EAGP,CAEAD,EAAmC+C,UAAY,CAC7C9C,SAAU+C,IAAAA,MAAgB,CAACA,IAAAA,KAAgBA,IAAAA,OAC3CxH,gBAAiBwH,IAAAA,OAAiBC,WAClC7F,gBAAiB4F,IAAAA,OAAiBC,WAClCxH,iBAAkBuH,IAAAA,OAAiBC,WACnC7D,UAAW4D,IAAAA,QCxNb,QAjBA,UAA0B,gBAAExH,EAAe,iBAAEC,EAAgB,gBAAE2B,IAC7D,MAAM8F,EAA0ClD,EAAmCgC,KAAK,KAAM,CAC5FxG,kBACAC,mBACA2B,oBAGF,MAAO,CACL,CACE+F,KAAM,6BACN7N,QAASoK,EACT0D,SAAUF,GAGhB,C,yICZA,MAAM,WAAEG,GAAeC,EAAAA,MAMvB,SAASC,GAA0B,gBACjC/H,EAAe,YACfgI,EAAW,0BACXC,EAAyB,kCACzBC,EAAiC,WACjC/F,IAEA,MAAM,kBAAEJ,EAAiB,gBAAEF,EAAe,uBAAEsG,EAAsB,sBAAEC,GAClEpI,EAAgBtD,SACZ2L,GAAWC,EAAAA,EAAAA,OAEX,EAAE3H,IAAM4H,EAAAA,EAAAA,IAAe,WAKvB,kBAAEC,IAAsBC,EAAAA,EAAAA,QACvB,iBAAE1O,EAAgB,UAAE+K,GAAaF,IAAuBC,EAAAA,EAAAA,OACxDxC,EAAqBsE,IAAgCtC,EAAAA,EAAAA,MACrDqE,EAAeC,IAAoBC,EAAAA,EAAAA,UAAS,YAC5CC,EAA2BC,IAAgCF,EAAAA,EAAAA,UAAS,IACtEJ,KAEEO,EAAkBC,IAAuBJ,EAAAA,EAAAA,UAAS,KAClDK,EAAaC,IAAkBN,EAAAA,EAAAA,UAAS,KACxCO,EAAsBC,IAA2BR,EAAAA,EAAAA,UAAS,CAAC,IAC3DS,EAAkBC,IAAuBV,EAAAA,EAAAA,UAAS,MAwBnDW,EACJzE,EAAUkC,IAAIjN,IAAmBiI,wBAE7B,cAAE/H,GAAkBoI,EAAoBvI,SAG9C+M,EAAAA,EAAAA,YAAU,KA6CR2B,EAAkBgB,SAAQC,GA3C1BpJ,eAAsC7C,GAEpC,MAAMkM,QAAwBvH,EAAWwH,MAAMC,QAAQC,OAAO,CAC5DC,iBAAkBtM,IAGpB,IAAKkM,GAAiBnK,OAEpB,MADA8I,EAAS,iBAAkB,SACrB,IAAI0B,MAAM,qBAGlB,IAAIC,EAAwBN,EAI5B,IACEM,QAA8B/B,EAA0ByB,EAC1D,CAAE,MAAOO,GACPnN,QAAQI,KAAK+M,EACf,CAGA,MAAMC,EADsCF,EAmRjChH,KAAImH,IAEV,CACLC,gBAAiBD,EAAME,UACvBC,UAAWH,EAAMI,KACjBC,iBAAkBL,EAAMM,YACxBC,aAAcP,EAAMQ,UACpBC,kBAAmBT,EAAMU,WACzBC,UAAWX,EAAMY,IACjBC,YAAab,EAAMc,YACnBzN,iBAAkB2M,EAAML,iBACxBoB,UAAWf,EAAMgB,SA7R2BnI,KAAIoI,IACvC,CACLtB,iBAAkBsB,EAAU5N,iBAC5B+M,KAAM1C,EAAWuD,EAAUd,YAAc3J,EAAE,eAC3C8J,YAAaW,EAAUZ,iBACvBK,WAAYO,EAAUR,kBACtBS,aAAcD,EAAUV,iBAI5B1B,GAAoBsC,IAClB,MAAMC,EAAM,IAAID,GAChB,IAAK,MAAMnB,KAASD,EACboB,EAAUE,MAAKC,GAAMA,EAAG3B,mBAAqBK,EAAML,oBACtDyB,EAAIG,KAAKvB,GAGb,OAAOoB,CAAG,GAEd,CAEiCI,CAAuBlC,IAAK,GAE5D,CAACjB,EAAmBP,KAGvBpB,EAAAA,EAAAA,YAAU,KACR,MAAM+E,EAAqB7J,EAAkB8J,kBAExCD,EAAmBrM,QAIxBqM,EAAmBpC,SAAQnJ,UACzB,MAAMyL,EAAmB,CAAC,EACpB7E,EAAalF,EAAkBgC,mBAAmBgI,EAAKlI,uBACvDmI,EAAW7J,EAAW8J,yBAAyBhF,GAC/C5B,EAAU2G,EAAS/I,KAAKiJ,MAAMF,EAASzM,OAAS,IAGjD8F,IAAW4B,GAAYkF,cAI5BL,EAAiBC,EAAKlI,6BAA+BmE,EAAY3C,GAEjE+D,GAAwBgD,IACf,IAAKA,KAAcN,MAC1B,GACF,GACD,CAAC/J,EAAmBI,EAAY6F,KAGnCnB,EAAAA,EAAAA,YAAU,KACR,MAAM+E,EAAqB7J,EAAkB8J,kBAE7C,IAAKD,EAAmBrM,OACtB,OAGF,MAAM8M,EAAoBC,EACxBV,EACAzC,EACAlP,EACA6K,EACAF,EACAzC,EACAJ,EACAF,EACAuG,GAGFc,EAAemD,EAAkB,GAEhC,CACDtK,EAAkB8J,kBAClB5R,EACA6K,EACA3C,EACAgH,KAIFtC,EAAAA,EAAAA,YAAU,KAER,MAAM0F,EAA+BxK,EAAkByK,UACrDzK,EAAkB0K,OAAOC,oBACzBnP,IACE,MAAM,iBAAEoP,EAAgB,QAAEnJ,GAAYjG,EACtCoP,EAAiBnD,SAAQnJ,UACvB,MAAMwD,EAAwBkI,EAAKlI,sBAE7BiI,EAAmB,CAAC,EACpB7E,EAAalF,EAAkBgC,mBAAmBF,GACxD,GAAIoD,GAAYkF,YACd,OAGE3I,EAAQoJ,cACVtD,EAAoBzF,GAGtB,MAAMmI,EAAW7J,EAAW8J,yBAAyBhF,GAC/C5B,EAAU2G,EAAS/I,KAAKiJ,MAAMF,EAASzM,OAAS,IAGjD8F,IAKLyG,EAAiBjI,SAA+BmE,EAAY3C,GAC5D+D,GAAwBgD,IACf,IAAKA,KAAcN,MAC1B,GACF,IAIN,MAAO,KACLS,EAA6BM,aAAa,CAC3C,GAEA,CAAC9K,EAAmBI,EAAY6F,EAAamB,EAAsBlP,EAAe6K,KAErF+B,EAAAA,EAAAA,YAAU,KAGR,MAAMiG,EAAiC/K,EAAkByK,UACvDzK,EAAkB0K,OAAOM,sBACzBC,IACE,MAAMX,EAAoBC,EACxBU,EACA7D,EACAlP,EACA6K,EACAF,EACAzC,EACAJ,EACAF,EACAuG,GAGFc,EAAemD,EAAkB,IAI/BY,EAA4ClL,EAAkByK,UAClEzK,EAAkB0K,OAAOS,yCACzB,KACE,MAAMb,EAAoBC,EACxBvK,EAAkBc,uBAClBsG,EACAlP,EACA6K,EACAF,EACAzC,EACAJ,EACAF,EACAuG,GAGFc,EAAemD,EAAkB,IAIrC,MAAO,KACLS,EAA+BD,cAC/BI,EAA0CJ,aAAa,CACxD,GACA,CAAC1D,EAAsBlP,EAAe6K,EAAW3C,EAAYJ,IAEhE,MAAMoL,EAiRR,SACEC,EACArE,EACAE,EACAd,GAEA,MAAMkF,EAAiB,GACjBC,EAAgB,GAChBC,EAAa,GAGnBxE,EAAiBS,SAAQW,IAEvB,MAAMqD,EAAsBvE,EAAY5K,QACtCyE,GAAMA,EAAGtF,mBAAqB2M,EAAML,mBAIhC2D,EAAWtF,EAAuBuF,4BACxCF,EAAoBG,KAAKF,GAgBzB,MAAMG,EAAW5I,OAAOzJ,OAAO,CAAC,EAAG4O,EAAO,CACxClB,YAAauE,IAIXJ,EAAyB1O,SAASyL,EAAML,mBAC1CuD,EAAe3B,KAAKkC,GACpBL,EAAW7B,KAAKkC,KAGhBN,EAAc5B,KAAKkC,GACnBL,EAAW7B,KAAKkC,GAClB,IAIF,MAAMC,EAAUA,CAACC,EAAGC,KAClB,MAAMC,EAAQC,KAAKC,MAAMJ,GAGzB,OAFcG,KAAKC,MAAMH,GAEVC,CAAK,EAGhBb,EAAO,CACX,CACExF,KAAM,UACNwG,MAAO,UACPvE,QAASyD,EAAeM,MAAK,CAACS,EAAQC,IAAWR,EAAQO,EAAO7D,KAAM8D,EAAO9D,SAE/E,CACE5C,KAAM,SACNwG,MAAO,SACPvE,QAAS0D,EAAcK,MAAK,CAACS,EAAQC,IAAWR,EAAQO,EAAO7D,KAAM8D,EAAO9D,SAE9E,CACE5C,KAAM,MACNwG,MAAO,MACPvE,QAAS2D,EAAWI,MAAK,CAACS,EAAQC,IAAWR,EAAQO,EAAO7D,KAAM8D,EAAO9D,UAI7E,OAAO4C,CACT,CA9VemB,CACX9F,EACAO,EACAE,EACAd,GAuDF,OArCAtB,EAAAA,EAAAA,YAAU,KACR,GAAIwC,EAAkB,CAEpB,MAAMxF,EAAwBwF,EACxBkF,EAAUC,SAASC,eAAgB,aAAY5K,KAEjD0K,GAA6C,mBAA3BA,EAAQG,iBAE5BH,EAAQG,eAAe,CAAEC,SAAU,WAEnCrF,EAAoB,MAExB,IACC,CAACD,EAAkBR,EAA2BH,KAEjD7B,EAAAA,EAAAA,YAAU,KACR,IAAKwC,EACH,OAGF,MAEMuF,EAoTV,SAAsC/K,EAAuBsJ,GAC3D,IAAK,IAAIxM,EAAI,EAAGA,EAAIwM,EAAK5N,OAAQoB,IAAK,CACpC,MAAM,QAAEiJ,GAAYuD,EAAKxM,GAEzB,IAAK,IAAIkO,EAAI,EAAGA,EAAIjF,EAAQrK,OAAQsP,IAAK,CACvC,MAAM,YAAE5F,GAAgBW,EAAQiF,GAEhC,IAAK,IAAIC,EAAI,EAAGA,EAAI7F,EAAY1J,OAAQuP,IAAK,CAG3C,GAFmB7F,EAAY6F,GAEhBjL,wBAA0BA,EACvC,MAAO,CACLkL,QAAS5B,EAAKxM,GAAGgH,KACjBnK,iBAAkBoM,EAAQiF,GAAG/E,iBAGnC,CACF,CACF,CACF,CAvU8BkF,CAFI3F,EAEgD8D,GAC9E,IAAKyB,EAGH,YAFA9R,QAAQI,KAAK,oDAIf,MAAM,QAAE6R,EAAO,iBAAEvR,GAAqBoR,EACtCjG,EAAiBoG,GAEjB,IADsBlG,EAA0BnK,SAASlB,GACrC,CAClB,MAAMyR,EAAmC,IAAIpG,EAA2BrL,GACxEsL,EAA6BmG,EAC/B,IACC,CAACpG,EAA2BQ,EAAkB8D,IAG/ChJ,EAAAA,cAAC+K,EAAAA,GAAY,CACX/B,KAAMA,EACNnN,gBAAiBA,EACjB0I,cAAeA,EACfG,0BAA2BA,EAC3BsG,aAzDJ,SAA2B3R,GACzB,MAAM4R,EAAsBvG,EAA0BnK,SAASlB,GACzDyR,EAAmCG,EACrC,IAAIvG,EAA0BxK,QAAOgR,GAAWA,IAAY7R,KAC5D,IAAIqL,EAA2BrL,GAInC,GAFAsL,EAA6BmG,IAExBG,EAAqB,CAExBlH,EAAkCnG,EAAmBvE,GADhC,EAEvB,CACF,EA8CI8R,WAAYC,IACV5G,EAAiB4G,EAAe,EAElCC,eAAgB3L,IACd,MAAMoD,EAAalF,EAAkBgC,mBAAmBF,GAGxD8C,EAA6B,iBAAkB,CAC7ClJ,kBAAmBwJ,EAAWxJ,mBAC9B,EAEJgS,iBAAkBA,OAClBC,uBA9SkC7L,IACpC,IAAI8L,EAAmB,GACvB,MAAMxP,EAAapG,EACnB,IACE4V,EAAmBxH,EAAuByH,0BACxCzP,EACA0D,EAEJ,CAAE,MAAOoG,GACPnN,QAAQI,KAAK+M,GACb7B,EAAsBhH,KAAK,CACzByO,MAAO,yBACPpP,QACE,gHACF/F,KAAM,OACNoV,SAAU,KAEd,CAEAlL,EAAoBmL,2BAA2BJ,EAAiB,EA4R9DK,6BAA8BzG,GAGpC,CAEAxB,EAA0BR,UAAY,CACpCvH,gBAAiBwH,IAAAA,OAAiBC,WAClCtF,WAAYqF,IAAAA,MAAgB,CAC1ByE,yBAA0BzE,IAAAA,KAAeC,aACxCA,WACHO,YAAaR,IAAAA,KAAeC,WAC5BQ,0BAA2BT,IAAAA,KAAeC,WAC1CS,kCAAmCV,IAAAA,KAAeC,YAGpD,UAwBA,SAAS6E,EACPrD,EACAE,EACA8G,EACAnL,EACAF,EACAzC,EACAJ,EACAF,EACAuG,GAEA,MAAM8H,EAAuB,GACvBC,EAA8B,GAsHpC,OArHAlH,EACG5K,QAAOyE,IAAOA,EAAGsN,8BACjB5G,SAAQ1G,IACP,MAAMuN,EAAWlH,EAAqBrG,EAAGe,uBACnCyM,EAsHZ,SAA2BxN,GACzB,GAAIyN,EAA2B7R,SAASoE,EAAGC,WAAaD,GAAIqJ,YAC1D,MAAO,mBAGT,MAAO,kBACT,CA5H4BqE,CAAkB1N,GAClC2N,EAAW7L,EAAoB8L,sBAC/BC,EAAwB,GAEb,IAAbF,GACF3L,EAAU0E,SAAQoH,IACZA,GAAc5O,wBAAwBtD,SAASoE,EAAGe,wBACpD8M,EAAsBjF,KAAKkF,EAAaC,cAC1C,IAIJ,MAAMC,EACc,qBAAlBR,EAAuCJ,EAAuBC,GAE1D,sBAAEtM,GAA0Bf,EAE5BiO,EAAiB,CACrBlN,wBACA4G,YAAa3H,EAAGJ,kBAChBsO,aAAclO,EAAGH,aACjBsO,SAAUnO,EAAGC,SACbmO,WAAYrJ,EAAW/E,EAAGqO,YAC1B9F,aAAcvI,EAAGsO,eACjBC,UAAWvO,EAAGuO,UACdC,SAAUxO,EAAGwO,SACb9T,iBAAkBsF,EAAGtF,iBACrB8S,gBACAD,WACAkB,SAAU,CACR7W,KAAM,aACNmJ,yBAGF2N,UAAWvB,EAA0BvR,SAASoE,EAAGrF,mBACjDgU,+BAAgC3O,EAAG4O,WACnCf,yBAGoB,qBAAlBL,IACEnO,EAAW5B,QAAU4B,EAAW5B,OAAOoR,QACzCZ,EAAea,WAAa9O,GAAIqJ,YAChC4E,EAAec,SAAW,KACxBhQ,EAAgBiQ,OAAO,CACrBlY,GAAI,eACJmY,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,QAASC,EAAAA,GACTC,aAAc,CACZvC,MAAO,gBACPwC,KAAMA,IACJlO,EAAAA,cAAA,OAAKmO,UAAU,kCACbnO,EAAAA,cAAA,SAAG,gDACHA,EAAAA,cAAA,KAAGmO,UAAU,QAAO,kCAGxBrX,QAAS,CACP,CACErB,GAAI,SACJkH,KAAM,SACNpG,KAAMkG,EAAAA,GAAAA,GAAiBC,WAEzB,CACEjH,GAAI,MACJkH,KAAM,MACNpG,KAAMkG,EAAAA,GAAAA,GAAiBI,QACvBuR,QAAS,CAAC,uBAGdC,QAASA,IAAM3Q,EAAgB4Q,QAAQ,CAAE7Y,GAAI,iBAC7C8Y,OAAQA,KACYlE,SAASmE,cAAc,sBAE/BC,OAAO,EAEnB3R,SAAUZ,OAAS6B,aACjB,OAAQA,EAAOtI,IACb,IAAK,MACH,UACQuI,EAAW5B,OAAOoR,OAAO7O,EAAGtF,iBAAkBsF,EAAGrF,mBACvDsE,EAAkB8Q,iBAAiBhP,GACnChC,EAAgB4Q,QAAQ,CAAE7Y,GAAI,iBAC9BwO,EAAsBhH,KAAK,CACzByO,MAAO,gBACPpP,QAAS,8BACT/F,KAAM,WAEV,CAAE,MAAOuP,GACPpI,EAAgB4Q,QAAQ,CAAE7Y,GAAI,iBAC9BwO,EAAsBhH,KAAK,CACzByO,MAAO,gBACPpP,QAAS,0BACT/F,KAAM,SAEV,CACA,MACF,IAAK,SACHmH,EAAgB4Q,QAAQ,CAAE7Y,GAAI,iBAElC,IAGJ,GAGJmX,EAAea,WAAY,GAI/Bd,EAAMpF,KAAKqF,EAAe,IAGvB,IAAIb,KAAyBC,EACtC,CAEA,MAAMI,EAA6B,CAAC,KAAM,MAAO,KAAM,WAAY,SAAU,SAAU,MAAO,MCrf9F,QAZA,SAAgCuC,EAAazN,GAC3C,OAAO,IAAIjF,SAAQ,CAACE,EAASC,KAC3B,MAAMwS,EAASvE,SAASwE,cAAc,UACtCF,EAAYG,UACTC,kBAAkB,CAAEH,SAAQ1N,YAC5B8N,MAAK9N,IACJ/E,EAAQyS,EAAOK,YAAY,IAE5BC,MAAM9S,EAAO,GAEpB,ECGA,QAjBA,SACE4B,EACAJ,EACAvE,EACAoP,GAGE7K,EAAkB8J,kBAAkByH,MAClCrM,GAAcA,EAAWzJ,mBAAqBA,KAMlD2E,EAAWoR,SAAS5B,OAAO6B,SAAS,CAAEhW,mBAAkBoP,gBAC1D,ECQA,SAAS6G,GAAiC,gBAAE7R,EAAe,iBAAE3B,EAAgB,gBAAED,IAC7E,MAAMmC,EAAalC,EAAiByT,sBAAsB,GAEpDzL,EAnBR,SAAoChI,GAClC,MAAM0T,EAAgB1T,EAAiB2T,eACrC,iDAGI,0BAAE3L,GAA8B0L,EAAcE,QACpD,OAAO5L,CACT,CAYoC6L,CAA2B7T,GACvD8T,EAA6B9L,EAA0BzB,KAAK,KAAMrE,GAClE6R,GAA0BC,EAAAA,EAAAA,aA6BlC,SAAyChU,GACvC,MAAMgT,EAAYhT,EAAiB2T,eACjC,oDAGF,IACE,MAAM,YAAEd,GAAgBG,EAAUY,QAAQK,0BAC1C,OAAOC,EAAuB3N,KAAK,KAAMsM,EAC3C,CAAE,MAAOsB,GACP,MAAM,IAAIrK,MAAM,6BAClB,CACF,CAvCIsK,CAAgCpU,GAChC,IAEIqU,EAAqCpM,EAAkC1B,KAC3E,KACArE,GAGF,OACEgC,EAAAA,cAAC4D,EAAyB,CACxB/H,gBAAiBA,EACjBmC,WAAYA,EACZ6F,YAAagM,EACb/L,0BAA2B8L,EAC3B7L,kCAAmCoM,GAGzC,CAwBAb,EAAiClM,UAAY,CAC3C3F,gBAAiB4F,IAAAA,OAAiBC,WAClCxH,iBAAkBuH,IAAAA,OAAiBC,WACnCzH,gBAAiBwH,IAAAA,OAAiBC,YAGpC,U,0BCtEA,SAAS8M,GAAc,cAAEC,EAAa,oBAAEC,EAAmB,SAAEC,IAC3D,MAAM,EAAE/T,IAAM4H,EAAAA,EAAAA,IAAe,oBAE7B,OACEpE,EAAAA,cAACA,EAAAA,SAAc,KACbA,EAAAA,cAACwQ,EAAAA,GAAM,CACLC,QAASJ,EACTE,SAAUA,EACVha,KAAMkG,EAAAA,GAAAA,GAAiBC,UACvBiG,KAAMlG,EAAAA,GAAAA,GAAiBiU,OAEtBlU,EAAE,WAELwD,EAAAA,cAACwQ,EAAAA,GAAM,CACLrC,UAAU,OACVsC,QAASH,EACT/Z,KAAMkG,EAAAA,GAAAA,GAAiBC,UACvBiG,KAAMlG,EAAAA,GAAAA,GAAiBiU,MACvBH,SAAUA,GAET/T,EAAE,kBAIX,CAEA4T,EAAchN,UAAY,CACxBiN,cAAehN,IAAAA,KACfiN,oBAAqBjN,IAAAA,KACrBkN,SAAUlN,IAAAA,MAGZ+M,EAAcO,aAAe,CAC3BN,cAAeA,IAAMO,MAAM,UAC3BN,oBAAqBA,IAAMM,MAAM,iBACjCL,UAAU,GAGZ,U,uBC3BA,MAAM,kBAAEM,GAAsBlN,EAAAA,OACtBD,WAAUA,GAAKC,EAAAA,MAEjBmN,EAAsC,CAC1CC,SAAKzW,EACL8L,KAAM,GACN0G,SAAU,GACVxG,YAAa,IAGf,SAAS0K,GAA8B,gBAAEnV,EAAe,iBAAEC,IACxD,MAAO0E,IAAgBE,EAAAA,EAAAA,OAChBuQ,EAA4BC,IAA0BzM,EAAAA,EAAAA,UAASqF,KAAKqH,MAAMC,YAC3EC,GAAsCC,EAAAA,EAAAA,GAAYL,EAA4B,MAC9E,mBAAEtT,EAAkB,gBAAED,EAAe,kBAAEE,GAAsB/B,EAAgBtD,UAC5E2F,EAAqBsE,IAAgCtC,EAAAA,EAAAA,MACtD,aAAErK,EAAY,cAAEC,GAAkBoI,EAAoBvI,SACrD4b,EAAqBC,IAA0B/M,EAAAA,EAAAA,UACpDqM,IAEKW,EAAqBC,IAA0BjN,EAAAA,EAAAA,UAAS,IACzDkN,GAAuBC,EAAAA,EAAAA,QAAO,OAC7BnS,IAAac,EAAAA,EAAAA,MAEpBmC,EAAAA,EAAAA,YAAU,KACR,MAKMmP,EALelU,EAAmBQ,kBACEjE,QACxCkE,GAAKvI,IAAiBuI,EAAEC,mBAAqBvI,EAAcyE,SAAS6D,EAAEE,sBAGxBO,KAAIT,GAyOxD,SAAkC0T,EAAaC,EAAOnU,GACpD,MAAM,kBAAES,EAAiB,mBAAEC,EAAkB,eAAE0T,GAAmBF,EAW5DhN,GANWmN,EAAAA,mBAAmBC,YAClC7T,EACAC,EACA0T,GAGkBpU,EAAkBuU,wBAAwB7T,IAE9D,IAAKwG,EAAY,KAAOA,EAAY,GAAG9D,OACrC,MAAM,IAAI4E,MAAM,+EAGlB,MACEwM,YAAaC,EAAe,IAC5BjQ,EACA4H,MAAOsI,EAAS,KAChB/b,EAAI,SACJgc,EAAQ,aACRC,EAAY,QACZC,GACEX,EAEEY,EAAYF,IAAe,GAC3BxI,EAAQsI,GAAaG,GAAS9V,MAAQ+V,GAAW/V,MAAQ,UAC/D,IAAIyV,EAAcC,GAAmB,GACrC,GAAIG,EAAc,CAChB,MAAMG,EAAW,GACjBH,EAAanN,SAAQuN,IACfA,GAAMjW,OAASqN,GACjB2I,EAASpL,KAAKqL,EAAKjW,KACrB,IAEFyV,EAAc,IAAIO,KAAaP,EACjC,CACIK,GAAWA,GAAS9V,OAASqN,IAC/BoI,EAAc,CAACK,EAAQ9V,QAASyV,IAGlC,MAAO,CACLhQ,MACA4H,QACAsI,YACAO,gBAAiBtc,EACjB6b,cACAC,kBACAS,SAAUP,EACVE,UACAD,eAEJ,CA/RMO,CAAyB3U,EAAGT,EAAmBqV,YAAapV,KAE9D8T,EAAuBG,EAAmB,GAEzC,CAAClU,EAAoB9H,EAAcC,EAAeub,IAErD,MAAM4B,EAA4B/W,UAChC,GAAIgC,EAAoBgV,QAAQ,YAAa,CAC3C,MAAM7Z,EAAmBxD,EACnBsd,EAAYlB,EAAAA,mBAAmBmB,SAAS/Z,GACxCga,EAAeF,EAAU3F,OAAO,GAAGhH,UAAU,IAC7C,UAAEL,EAAS,iBAAEE,GAAqBgN,EAElC3M,EAAa,IAAI4M,IACvBH,EAAU3F,OAAOnI,SAAQmI,IACnB1X,EAAcyE,SAASiT,EAAOlU,oBAChCoN,EAAW6M,IAAI/F,EAAOhH,UAAU,GAAG5H,SACrC,IAEF,MAAMkO,EAAW0G,MAAMC,KAAK/M,GAAYgN,KAAK,KAEzCnC,EAAoBR,MAAQ1X,GAC9BmY,EAAuB,CACrBT,IAAK1X,EACL+M,KAAMD,EACN2G,WACAxG,YAAaD,GAGnB,KAA4B,KAAjBxQ,QAAwCyE,IAAjBzE,GAChC2b,EAAuBV,EACzB,GAIFpO,EAAAA,EAAAA,YAAU,KACRuQ,GAA2B,GAC1B,CAAC1B,EAAoBR,IAAK7S,EAAqBrI,EAAcod,KAOhEvQ,EAAAA,EAAAA,YAAU,KACR,MAAMiR,EAAQhW,EAAmB2K,OAAOsL,kBAClCC,EAAWlW,EAAmB2K,OAAOwL,sBACrCC,EAAUpW,EAAmB2K,OAAO0L,oBACpCC,EAAUtW,EAAmB2K,OAAO4L,oBACpCC,EAAUxW,EAAmB2K,OAAO8L,qBACpCC,EAAgB,GAetB,MAbA,CAACV,EAAOE,EAAUE,EAASE,EAASE,GAAS9O,SAAQ5M,IACnD4b,EAAc9M,KACZ5J,EAAmB0K,UAAU5P,GAAK,KAChCyY,EAAuBpH,KAAKqH,MAAMC,YAC9B3Y,IAAQkb,GACVW,KAAS,KACP3C,EAAqB4C,QAAQC,UAAY7C,EAAqB4C,QAAQE,YAAY,GACjF,IAFHH,EAGF,IACC5L,YACJ,IAGI,KACL2L,EAAchP,SAAQqP,IACpBA,GAAO,GACP,CACH,GACA,CAAC/W,EAAoB6E,IAWxB,MAAMmS,EAAcA,EAAGvS,MAAK0Q,eAC1BnV,EAAmBiX,kBAAkBpU,EAAa5K,iBAAkBwM,GAEpEyS,EAA8B,CAAEzS,MAAK0Q,YAAW,EAG5CgC,EAA+BA,EAAG1S,MAAK0Q,eAC3C,MAAMhB,EAAcnU,EAAmBoX,eAAe3S,GACtDuS,EAAY,CAAEvS,MAAK0Q,aAEnB,MAAMkC,EAAkBA,EAAGjX,SAAQnB,YACjC,GACO,SADCmB,EAAOtI,GAEXkI,EAAmBsX,OACjB7S,EACA,IACK0P,KACAlV,IAEL,GAINc,EAAgB4Q,QAAQ,CAAE7Y,GAAI,oBAAqB,EAGrDiI,EAAgBiQ,OAAO,CACrBlY,GAAI,mBACJmY,YAAY,EACZC,aAAa,EACbC,aAAa,EACbC,QAASC,EAAAA,GACTC,aAAc,CACZvC,MAAO,aACPwJ,eAAe,EACftY,MAAO,CAAEoN,MAAO8H,EAAY9H,OAAS,IACrCkE,KAAMA,EAAGtR,QAAOuY,cAYZnV,EAAAA,cAACoV,EAAAA,GAAK,CACJpL,MAAM,wBACNqL,eAAe,4CACfC,WAAS,EACT7f,GAAG,aACH0Y,UAAU,+BACV5X,KAAK,OACLqG,MAAOA,EAAMoN,MACbuL,SAnBoBje,IACtBA,EAAMke,UACNL,GAASvY,IAAS,IAAMA,EAAOoN,MAAO1S,EAAMT,OAAO+F,SAAS,EAkB1D6Y,WAfsBne,IACN,UAAdA,EAAMyZ,KACRiE,EAAgB,CAAEpY,QAAOmB,OAAQ,CAAEtI,GAAI,SACzC,IAgBJqB,QAAS,CACP,CAAErB,GAAI,SAAUkH,KAAM,SAAUpG,KAAMkG,EAAAA,GAAAA,GAAiBC,WACvD,CAAEjH,GAAI,OAAQkH,KAAM,OAAQpG,KAAMkG,EAAAA,GAAAA,GAAiBI,UAErDC,SAAUkY,IAEZ,EAGEH,EAAgCA,EAAGzS,MAAK0Q,eAC5C,IAAKA,EAAU,CACb,MAAM4C,EAAe,IAAIjE,GACnBK,EAAc4D,EAAarO,MAAKjJ,GAAKA,EAAEgE,MAAQA,IAErDsT,EAAarQ,SAAQjH,GAAMA,EAAE0U,SAAW1U,EAAEgE,MAAQA,IAClD0P,EAAYgB,UAAW,EACvBpB,EAAuBgE,EACzB,GAGIC,EAAqClE,EAAoBvX,QAC7D0b,GAAMA,EAAG/C,kBAAoBlV,EAAmBqV,YAAY6C,QAExDC,EAAqBrE,EAAoBvX,QAC7C0b,GAAMA,EAAG/C,kBAAoBlV,EAAmBqV,YAAY6C,QAG9D,OACE7V,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACEmO,UAAU,wDACV4H,IAAKpE,EACL,UAAS,6BAERJ,EAAoBR,KACnB/Q,EAAAA,cAACgW,EAAAA,GAAY,CACX5P,KAAM1C,EAAW6N,EAAoBnL,MACrC0G,SAAUyE,EAAoBzE,SAC9BxG,YAAaiL,EAAoBjL,cAGrCtG,EAAAA,cAACiW,EAAAA,GAAgB,CACfvK,MAAM,eACNtS,KAAMuc,EACN9Z,gBAAiBA,EACjB4U,QAASkE,EACTuB,OAAQpB,IAEqB,IAA9BgB,EAAmB1a,QAClB4E,EAAAA,cAACiW,EAAAA,GAAgB,CACfvK,MAAM,sBACNtS,KAAM0c,EACNja,gBAAiBA,EACjB4U,QAASkE,EACTuB,OAAQpB,MAIZrV,GAAW0W,gBACXnW,EAAAA,cAAA,OAAKmO,UAAU,2BACbnO,EAAAA,cAACoQ,EAAa,CACZC,cAnIVnU,iBACE,MACMgC,EADeP,EAAmBQ,kBACCjE,QACvCkE,GAAKvI,IAAiBuI,EAAEC,mBAAqBvI,EAAcyE,SAAS6D,EAAEE,sBAGxEuS,EAAkB3S,EAAqBP,EACzC,EA6HU2S,oBAAqBA,KACnB9N,EAA6B,cAAe,CAC1CxG,WAAYwE,EAAa5K,iBACzBoF,cAAc,GACd,EAEJuV,SACgC,IAA9BuF,EAAmB1a,QAA8D,IAA9Cua,EAAmCva,UAOpF,CAEA4V,EAA8B5N,UAAY,CACxCvH,gBAAiBwH,IAAAA,MAAgB,CAC/B9K,SAAU8K,IAAAA,MAAgB,CACxB1F,mBAAoB0F,IAAAA,MAAgB,CAClClF,gBAAiBkF,IAAAA,KAAeC,WAChC0P,YAAa3P,IAAAA,OAAiBC,aAC7BA,aACFA,aACFA,YA6DL,U,eC7SA,QA5BA,UAAwB,gBAAE7F,EAAe,iBAAE3B,EAAgB,gBAAED,IAC3D,MAAO,CACL,CACE2H,KAAM,aACN4S,SAAU,cACVC,UAAW,UACXrM,MAAOzN,EAAAA,EAAKC,EAAE,qBACd8Z,UAAW1S,EAA0BvB,KAAK,KAAM,CAC9C5E,kBACA3B,mBACAD,qBAIJ,CACE2H,KAAM,sBACN4S,SAAU,aACVC,UAAW,UACXrM,MAAOzN,EAAAA,EAAKC,EAAE,0BACd8Z,UAAWtF,EAA8B3O,KAAK,KAAM,CAClD5E,kBACA3B,mBACAD,qBAIR,E,oOChCA,MAAM0a,EAAYvW,EAAAA,MAAW,IACpB,iCAGHwW,EAA0BC,GAE5BzW,EAAAA,cAACA,EAAAA,SAAc,CAAC0W,SAAU1W,EAAAA,cAAA,WAAK,eAC7BA,EAAAA,cAACuW,EAAcE,IAyBrB,QApBA,UAA2B,gBAAE5a,EAAe,gBAAE4B,EAAe,iBAAE3B,IAY7D,MAAO,CACL,CACE0H,KAAM,sBACN8S,UAd4CG,GAE5CzW,EAAAA,cAACwW,EAAuBG,EAAA,CACtB9a,gBAAiBA,EACjB4B,gBAAiBA,EACjB3B,iBAAkBA,GACd2a,KAWZ,EChBA,EAXqC,CAInChhB,G,4DCPSmhB,GDSTC,iBAAgB,IAChBC,eAAc,EACdC,kBAAiBA,E","sources":["webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/measurementTrackingMachine.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptBeginTracking.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewSeries.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptTrackNewStudy.js","webpack:///../../../extensions/measurement-tracking/src/_shared/getNextSRSeriesNumber.js","webpack:///../../../extensions/measurement-tracking/src/_shared/PROMPT_RESPONSES.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptSaveReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/promptHydrateStructuredReport.js","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/hydrateStructuredReport.tsx","webpack:///../../../extensions/measurement-tracking/src/contexts/TrackedMeasurementsContext/TrackedMeasurementsContext.tsx","webpack:///../../../extensions/measurement-tracking/src/getContextModule.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/PanelStudyBrowserTracking.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/getImageSrcFromImageId.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/requestDisplaySetCreationForStudy.js","webpack:///../../../extensions/measurement-tracking/src/panels/PanelStudyBrowserTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/ActionButtons.tsx","webpack:///../../../extensions/measurement-tracking/src/panels/PanelMeasurementTableTracking/index.tsx","webpack:///../../../extensions/measurement-tracking/src/getPanelModule.tsx","webpack:///../../../extensions/measurement-tracking/src/getViewportModule.tsx","webpack:///../../../extensions/measurement-tracking/src/index.tsx","webpack:///../../../extensions/measurement-tracking/src/id.js"],"sourcesContent":["import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\nimport { assign } from 'xstate';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE_REPORT: 5,\n};\n\nconst machineConfiguration = {\n  id: 'measurementTracking',\n  initial: 'idle',\n  context: {\n    activeViewportId: null,\n    trackedStudy: '',\n    trackedSeries: [],\n    ignoredSeries: [],\n    //\n    prevTrackedStudy: '',\n    prevTrackedSeries: [],\n    prevIgnoredSeries: [],\n    //\n    ignoredSRSeriesForHydration: [],\n    isDirty: false,\n  },\n  states: {\n    off: {\n      type: 'final',\n    },\n    idle: {\n      entry: 'clearContext',\n      on: {\n        TRACK_SERIES: 'promptBeginTracking',\n        // Unused? We may only do PROMPT_HYDRATE_SR now?\n        SET_TRACKED_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndMultipleSeries', 'setIsDirtyToClean'],\n          },\n        ],\n        PROMPT_HYDRATE_SR: {\n          target: 'promptHydrateStructuredReport',\n          cond: 'hasNotIgnoredSRSeriesForHydration',\n        },\n        RESTORE_PROMPT_HYDRATE_SR: 'promptHydrateStructuredReport',\n        HYDRATE_SR: 'hydrateStructuredReport',\n        UPDATE_ACTIVE_VIEWPORT_ID: {\n          actions: assign({\n            activeViewportId: (_, event) => event.activeViewportId,\n          }),\n        },\n      },\n    },\n    promptBeginTracking: {\n      invoke: {\n        src: 'promptBeginTracking',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndSeries', 'setIsDirty'],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'off',\n            cond: 'shouldKillMachine',\n          },\n          {\n            target: 'idle',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    tracking: {\n      on: {\n        TRACK_SERIES: [\n          {\n            target: 'promptTrackNewStudy',\n            cond: 'isNewStudy',\n          },\n          {\n            target: 'promptTrackNewSeries',\n            cond: 'isNewSeries',\n          },\n        ],\n        UNTRACK_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['removeTrackedSeries', 'setIsDirty'],\n            cond: 'hasRemainingTrackedSeries',\n          },\n          {\n            target: 'idle',\n          },\n        ],\n        SET_TRACKED_SERIES: [\n          {\n            target: 'tracking',\n            actions: ['setTrackedStudyAndMultipleSeries'],\n          },\n        ],\n        SAVE_REPORT: 'promptSaveReport',\n        SET_DIRTY: [\n          {\n            target: 'tracking',\n            actions: ['setIsDirty'],\n            cond: 'shouldSetDirty',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n      },\n    },\n    promptTrackNewSeries: {\n      invoke: {\n        src: 'promptTrackNewSeries',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: ['addTrackedSeries', 'setIsDirty'],\n            cond: 'shouldAddSeries',\n          },\n          {\n            target: 'tracking',\n            actions: [\n              'discardPreviouslyTrackedMeasurements',\n              'setTrackedStudyAndSeries',\n              'setIsDirty',\n            ],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'promptSaveReport',\n            cond: 'shouldPromptSaveReport',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptTrackNewStudy: {\n      invoke: {\n        src: 'promptTrackNewStudy',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'discardPreviouslyTrackedMeasurements',\n              'setTrackedStudyAndSeries',\n              'setIsDirty',\n            ],\n            cond: 'shouldSetStudyAndSeries',\n          },\n          {\n            target: 'tracking',\n            actions: ['ignoreSeries'],\n            cond: 'shouldAddIgnoredSeries',\n          },\n          {\n            target: 'promptSaveReport',\n            cond: 'shouldPromptSaveReport',\n          },\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptSaveReport: {\n      invoke: {\n        src: 'promptSaveReport',\n        onDone: [\n          // \"clicked the save button\"\n          // - should clear all measurements\n          // - show DICOM SR\n          {\n            target: 'idle',\n            actions: ['clearAllMeasurements', 'showStructuredReportDisplaySetInActiveViewport'],\n            cond: 'shouldSaveAndContinueWithSameReport',\n          },\n          // \"starting a new report\"\n          // - remove \"just saved\" measurements\n          // - start tracking a new study + report\n          {\n            target: 'tracking',\n            actions: ['discardPreviouslyTrackedMeasurements', 'setTrackedStudyAndSeries'],\n            cond: 'shouldSaveAndStartNewReport',\n          },\n          // Cancel, back to tracking\n          {\n            target: 'tracking',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    promptHydrateStructuredReport: {\n      invoke: {\n        src: 'promptHydrateStructuredReport',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'setTrackedStudyAndMultipleSeries',\n              'jumpToFirstMeasurementInActiveViewport',\n              'setIsDirtyToClean',\n            ],\n            cond: 'shouldHydrateStructuredReport',\n          },\n          {\n            target: 'idle',\n            actions: ['ignoreHydrationForSRSeries'],\n            cond: 'shouldIgnoreHydrationForSR',\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n    hydrateStructuredReport: {\n      invoke: {\n        src: 'hydrateStructuredReport',\n        onDone: [\n          {\n            target: 'tracking',\n            actions: [\n              'setTrackedStudyAndMultipleSeries',\n              'jumpToFirstMeasurementInActiveViewport',\n              'setIsDirtyToClean',\n            ],\n          },\n        ],\n        onError: {\n          target: 'idle',\n        },\n      },\n    },\n  },\n  strict: true,\n};\n\nconst defaultOptions = {\n  services: {\n    promptBeginTracking: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n    promptTrackNewStudy: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n    promptTrackNewSeries: (ctx, evt) => {\n      // return { userResponse, StudyInstanceUID, SeriesInstanceUID }\n    },\n  },\n  actions: {\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\n      console.log('discardPreviouslyTrackedMeasurements: not implemented');\n    },\n    clearAllMeasurements: (ctx, evt) => {\n      console.log('clearAllMeasurements: not implemented');\n    },\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\n      console.warn('jumpToFirstMeasurementInActiveViewport: not implemented');\n    },\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\n      console.warn('showStructuredReportDisplaySetInActiveViewport: not implemented');\n    },\n    clearContext: assign({\n      trackedStudy: '',\n      trackedSeries: [],\n      ignoredSeries: [],\n      prevTrackedStudy: '',\n      prevTrackedSeries: [],\n      prevIgnoredSeries: [],\n    }),\n    // Promise resolves w/ `evt.data.*`\n    setTrackedStudyAndSeries: assign((ctx, evt) => ({\n      prevTrackedStudy: ctx.trackedStudy,\n      prevTrackedSeries: ctx.trackedSeries.slice(),\n      prevIgnoredSeries: ctx.ignoredSeries.slice(),\n      //\n      trackedStudy: evt.data.StudyInstanceUID,\n      trackedSeries: [evt.data.SeriesInstanceUID],\n      ignoredSeries: [],\n    })),\n    setTrackedStudyAndMultipleSeries: assign((ctx, evt) => {\n      const studyInstanceUID = evt.StudyInstanceUID || evt.data.StudyInstanceUID;\n      const seriesInstanceUIDs = evt.SeriesInstanceUIDs || evt.data.SeriesInstanceUIDs;\n\n      return {\n        prevTrackedStudy: ctx.trackedStudy,\n        prevTrackedSeries: ctx.trackedSeries.slice(),\n        prevIgnoredSeries: ctx.ignoredSeries.slice(),\n        //\n        trackedStudy: studyInstanceUID,\n        trackedSeries: [...ctx.trackedSeries, ...seriesInstanceUIDs],\n        ignoredSeries: [],\n      };\n    }),\n    setIsDirtyToClean: assign((ctx, evt) => ({\n      isDirty: false,\n    })),\n    setIsDirty: assign((ctx, evt) => ({\n      isDirty: true,\n    })),\n    ignoreSeries: assign((ctx, evt) => ({\n      prevIgnoredSeries: [...ctx.ignoredSeries],\n      ignoredSeries: [...ctx.ignoredSeries, evt.data.SeriesInstanceUID],\n    })),\n    ignoreHydrationForSRSeries: assign((ctx, evt) => ({\n      ignoredSRSeriesForHydration: [\n        ...ctx.ignoredSRSeriesForHydration,\n        evt.data.srSeriesInstanceUID,\n      ],\n    })),\n    addTrackedSeries: assign((ctx, evt) => ({\n      prevTrackedSeries: [...ctx.trackedSeries],\n      trackedSeries: [...ctx.trackedSeries, evt.data.SeriesInstanceUID],\n    })),\n    removeTrackedSeries: assign((ctx, evt) => ({\n      prevTrackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\n      trackedSeries: ctx.trackedSeries.slice().filter(ser => ser !== evt.SeriesInstanceUID),\n    })),\n  },\n  guards: {\n    // We set dirty any time we performan an action that:\n    // - Tracks a new study\n    // - Tracks a new series\n    // - Adds a measurement to an already tracked study/series\n    //\n    // We set clean any time we restore from an SR\n    //\n    // This guard/condition is specific to \"new measurements\"\n    // to make sure we only track dirty when the new measurement is specific\n    // to a series we're already tracking\n    //\n    // tl;dr\n    // Any report change, that is not a hydration of an existing report, should\n    // result in a \"dirty\" report\n    //\n    // Where dirty means there would be \"loss of data\" if we blew away measurements\n    // without creating a new SR.\n    shouldSetDirty: (ctx, evt) => {\n      return (\n        // When would this happen?\n        evt.SeriesInstanceUID === undefined || ctx.trackedSeries.includes(evt.SeriesInstanceUID)\n      );\n    },\n    shouldKillMachine: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.NO_NEVER,\n    shouldAddSeries: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.ADD_SERIES,\n    shouldSetStudyAndSeries: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.SET_STUDY_AND_SERIES,\n    shouldAddIgnoredSeries: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.NO_NOT_FOR_SERIES,\n    shouldPromptSaveReport: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.CREATE_REPORT,\n    shouldIgnoreHydrationForSR: (ctx, evt) => evt.data && evt.data.userResponse === RESPONSE.CANCEL,\n    shouldSaveAndContinueWithSameReport: (ctx, evt) =>\n      evt.data &&\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\n      evt.data.isBackupSave === true,\n    shouldSaveAndStartNewReport: (ctx, evt) =>\n      evt.data &&\n      evt.data.userResponse === RESPONSE.CREATE_REPORT &&\n      evt.data.isBackupSave === false,\n    shouldHydrateStructuredReport: (ctx, evt) =>\n      evt.data && evt.data.userResponse === RESPONSE.HYDRATE_REPORT,\n    // Has more than 1, or SeriesInstanceUID is not in list\n    // --> Post removal would have non-empty trackedSeries array\n    hasRemainingTrackedSeries: (ctx, evt) =>\n      ctx.trackedSeries.length > 1 || !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\n    hasNotIgnoredSRSeriesForHydration: (ctx, evt) => {\n      return !ctx.ignoredSRSeriesForHydration.includes(evt.SeriesInstanceUID);\n    },\n    isNewStudy: (ctx, evt) =>\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\n      ctx.trackedStudy !== evt.StudyInstanceUID,\n    isNewSeries: (ctx, evt) =>\n      !ctx.ignoredSeries.includes(evt.SeriesInstanceUID) &&\n      !ctx.trackedSeries.includes(evt.SeriesInstanceUID),\n  },\n};\n\nexport { defaultOptions, machineConfiguration };\n","import { ButtonEnums } from '@ohif/ui';\nimport i18n from 'i18next';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n};\n\nfunction promptBeginTracking({ servicesManager, extensionManager }, ctx, evt) {\n  const { uiViewportDialogService } = servicesManager.services;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\n    const actions = [\n      {\n        id: 'prompt-begin-tracking-cancel',\n        type: ButtonEnums.type.secondary,\n        text: i18n.t('Common:No'),\n        value: RESPONSE.CANCEL,\n      },\n      {\n        id: 'prompt-begin-tracking-no-do-not-ask-again',\n        type: ButtonEnums.type.secondary,\n        text: i18n.t('MeasurementTable:No, do not ask again'),\n        value: RESPONSE.NO_NEVER,\n      },\n      {\n        id: 'prompt-begin-tracking-yes',\n        type: ButtonEnums.type.primary,\n        text: i18n.t('Common:Yes'),\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      id: 'measurement-tracking-prompt-begin-tracking',\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptBeginTracking;\n","import { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nfunction promptTrackNewSeries({ servicesManager, extensionManager }, ctx, evt) {\n  const { UIViewportDialogService } = servicesManager.services;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askShouldAddMeasurements(UIViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.CREATE_REPORT) {\n      promptResult = ctx.isDirty\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\n        : RESPONSE.SET_STUDY_AND_SERIES;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave: false,\n    });\n  });\n}\n\nfunction _askShouldAddMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to add this measurement to the existing report?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'Cancel',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Create new report',\n        value: RESPONSE.CREATE_REPORT,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Add to existing report',\n        value: RESPONSE.ADD_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message =\n      'You have existing tracked measurements. What would you like to do with your existing tracked measurements?';\n    const actions = [\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: 'Save',\n        value: RESPONSE.CREATE_REPORT,\n      },\n      {\n        type: 'primary',\n        text: 'Discard',\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'warning',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptTrackNewSeries;\n","import i18n from 'i18next';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nfunction promptTrackNewStudy({ servicesManager, extensionManager }, ctx, evt) {\n  const { UIViewportDialogService } = servicesManager.services;\n  const { viewportId, StudyInstanceUID, SeriesInstanceUID } = evt;\n\n  return new Promise(async function (resolve, reject) {\n    let promptResult = await _askTrackMeasurements(UIViewportDialogService, viewportId);\n\n    if (promptResult === RESPONSE.SET_STUDY_AND_SERIES) {\n      promptResult = ctx.isDirty\n        ? await _askSaveDiscardOrCancel(UIViewportDialogService, viewportId)\n        : RESPONSE.SET_STUDY_AND_SERIES;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave: false,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(UIViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = i18n.t('MeasurementTable:Track measurements for this series?');\n    const actions = [\n      { type: 'cancel', text: i18n.t('MeasurementTable:No'), value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: i18n.t('MeasurementTable:No, do not ask again'),\n        value: RESPONSE.NO_NOT_FOR_SERIES,\n      },\n      {\n        type: 'primary',\n        text: i18n.t('MeasurementTable:Yes'),\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nfunction _askSaveDiscardOrCancel(UIViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message =\n      'Measurements cannot span across multiple studies. Do you want to save your tracked measurements?';\n    const actions = [\n      { type: 'cancel', text: 'Cancel', value: RESPONSE.CANCEL },\n      {\n        type: 'secondary',\n        text: 'No, discard previously tracked series & measurements',\n        value: RESPONSE.SET_STUDY_AND_SERIES,\n      },\n      {\n        type: 'primary',\n        text: 'Yes',\n        value: RESPONSE.CREATE_REPORT,\n      },\n    ];\n    const onSubmit = result => {\n      UIViewportDialogService.hide();\n      resolve(result);\n    };\n\n    UIViewportDialogService.show({\n      viewportId,\n      type: 'warning',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        UIViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptTrackNewStudy;\n","const MIN_SR_SERIES_NUMBER = 4700;\n\nexport default function getNextSRSeriesNumber(displaySetService) {\n  const activeDisplaySets = displaySetService.getActiveDisplaySets();\n  const srDisplaySets = activeDisplaySets.filter(ds => ds.Modality === 'SR');\n  const srSeriesNumbers = srDisplaySets.map(ds => ds.SeriesNumber);\n  const maxSeriesNumber = Math.max(...srSeriesNumbers, MIN_SR_SERIES_NUMBER);\n\n  return maxSeriesNumber + 1;\n}\n","const RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n};\n\nexport default RESPONSE;\n","import { createReportAsync, createReportDialogPrompt } from '@ohif/extension-default';\nimport getNextSRSeriesNumber from '../../_shared/getNextSRSeriesNumber';\nimport RESPONSE from '../../_shared/PROMPT_RESPONSES';\n\nfunction promptSaveReport({ servicesManager, commandsManager, extensionManager }, ctx, evt) {\n  const { uiDialogService, measurementService, displaySetService } = servicesManager.services;\n  const viewportId = evt.viewportId === undefined ? evt.data.viewportId : evt.viewportId;\n  const isBackupSave = evt.isBackupSave === undefined ? evt.data.isBackupSave : evt.isBackupSave;\n  const StudyInstanceUID = evt?.data?.StudyInstanceUID;\n  const SeriesInstanceUID = evt?.data?.SeriesInstanceUID;\n\n  const { trackedStudy, trackedSeries } = ctx;\n  let displaySetInstanceUIDs;\n\n  return new Promise(async function (resolve, reject) {\n    // TODO: Fallback if (uiDialogService) {\n    const promptResult = await createReportDialogPrompt(uiDialogService, {\n      extensionManager,\n    });\n\n    if (promptResult.action === RESPONSE.CREATE_REPORT) {\n      const dataSources = extensionManager.getDataSources();\n      const dataSource = dataSources[0];\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements.filter(\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n      );\n\n      const SeriesDescription =\n        // isUndefinedOrEmpty\n        promptResult.value === undefined || promptResult.value === ''\n          ? 'Research Derived Series' // default\n          : promptResult.value; // provided value\n\n      const SeriesNumber = getNextSRSeriesNumber(displaySetService);\n\n      const getReport = async () => {\n        return commandsManager.runCommand(\n          'storeMeasurements',\n          {\n            measurementData: trackedMeasurements,\n            dataSource,\n            additionalFindingTypes: ['ArrowAnnotate'],\n            options: {\n              SeriesDescription,\n              SeriesNumber,\n            },\n          },\n          'CORNERSTONE_STRUCTURED_REPORT'\n        );\n      };\n      displaySetInstanceUIDs = await createReportAsync({\n        servicesManager,\n        getReport,\n      });\n    } else if (promptResult.action === RESPONSE.CANCEL) {\n      // Do nothing\n    }\n\n    resolve({\n      userResponse: promptResult.action,\n      createdDisplaySetInstanceUIDs: displaySetInstanceUIDs,\n      StudyInstanceUID,\n      SeriesInstanceUID,\n      viewportId,\n      isBackupSave,\n    });\n  });\n}\n\nexport default promptSaveReport;\n","import { hydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\nimport { ButtonEnums } from '@ohif/ui';\n\nconst RESPONSE = {\n  NO_NEVER: -1,\n  CANCEL: 0,\n  CREATE_REPORT: 1,\n  ADD_SERIES: 2,\n  SET_STUDY_AND_SERIES: 3,\n  NO_NOT_FOR_SERIES: 4,\n  HYDRATE_REPORT: 5,\n};\n\nfunction promptHydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\n  const { uiViewportDialogService, displaySetService } = servicesManager.services;\n  const { viewportId, displaySetInstanceUID } = evt;\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  return new Promise(async function (resolve, reject) {\n    const promptResult = await _askTrackMeasurements(uiViewportDialogService, viewportId);\n\n    // Need to do action here... So we can set state...\n    let StudyInstanceUID, SeriesInstanceUIDs;\n\n    if (promptResult === RESPONSE.HYDRATE_REPORT) {\n      console.warn('!! HYDRATING STRUCTURED REPORT');\n      const hydrationResult = hydrateStructuredReport(\n        { servicesManager, extensionManager, appConfig },\n        displaySetInstanceUID\n      );\n\n      StudyInstanceUID = hydrationResult.StudyInstanceUID;\n      SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\n    }\n\n    resolve({\n      userResponse: promptResult,\n      displaySetInstanceUID: evt.displaySetInstanceUID,\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      viewportId,\n      StudyInstanceUID,\n      SeriesInstanceUIDs,\n    });\n  });\n}\n\nfunction _askTrackMeasurements(uiViewportDialogService, viewportId) {\n  return new Promise(function (resolve, reject) {\n    const message = 'Do you want to continue tracking measurements for this study?';\n    const actions = [\n      {\n        type: ButtonEnums.type.secondary,\n        text: 'No',\n        value: RESPONSE.CANCEL,\n      },\n      {\n        type: ButtonEnums.type.primary,\n        text: 'Yes',\n        value: RESPONSE.HYDRATE_REPORT,\n      },\n    ];\n    const onSubmit = result => {\n      uiViewportDialogService.hide();\n      resolve(result);\n    };\n\n    uiViewportDialogService.show({\n      viewportId,\n      type: 'info',\n      message,\n      actions,\n      onSubmit,\n      onOutsideClick: () => {\n        uiViewportDialogService.hide();\n        resolve(RESPONSE.CANCEL);\n      },\n    });\n  });\n}\n\nexport default promptHydrateStructuredReport;\n","import { hydrateStructuredReport as baseHydrateStructuredReport } from '@ohif/extension-cornerstone-dicom-sr';\n\nfunction hydrateStructuredReport({ servicesManager, extensionManager, appConfig }, ctx, evt) {\n  const { displaySetService } = servicesManager.services;\n  const { viewportId, displaySetInstanceUID } = evt;\n  const srDisplaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n\n  return new Promise((resolve, reject) => {\n    const hydrationResult = baseHydrateStructuredReport(\n      { servicesManager, extensionManager, appConfig },\n      displaySetInstanceUID\n    );\n\n    const StudyInstanceUID = hydrationResult.StudyInstanceUID;\n    const SeriesInstanceUIDs = hydrationResult.SeriesInstanceUIDs;\n\n    resolve({\n      displaySetInstanceUID: evt.displaySetInstanceUID,\n      srSeriesInstanceUID: srDisplaySet.SeriesInstanceUID,\n      viewportId,\n      StudyInstanceUID,\n      SeriesInstanceUIDs,\n    });\n  });\n}\n\nexport default hydrateStructuredReport;\n","import React, { useContext, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Machine } from 'xstate';\nimport { useMachine } from '@xstate/react';\nimport { useViewportGrid } from '@ohif/ui';\nimport { machineConfiguration, defaultOptions } from './measurementTrackingMachine';\nimport promptBeginTracking from './promptBeginTracking';\nimport promptTrackNewSeries from './promptTrackNewSeries';\nimport promptTrackNewStudy from './promptTrackNewStudy';\nimport promptSaveReport from './promptSaveReport';\nimport promptHydrateStructuredReport from './promptHydrateStructuredReport';\nimport hydrateStructuredReport from './hydrateStructuredReport';\nimport { useAppConfig } from '@state';\n\nconst TrackedMeasurementsContext = React.createContext();\nTrackedMeasurementsContext.displayName = 'TrackedMeasurementsContext';\nconst useTrackedMeasurements = () => useContext(TrackedMeasurementsContext);\n\nconst SR_SOPCLASSHANDLERID = '@ohif/extension-cornerstone-dicom-sr.sopClassHandlerModule.dicom-sr';\n\n/**\n *\n * @param {*} param0\n */\nfunction TrackedMeasurementsContextProvider(\n  { servicesManager, commandsManager, extensionManager }, // Bound by consumer\n  { children } // Component props\n) {\n  const [appConfig] = useAppConfig();\n\n  const [viewportGrid, viewportGridService] = useViewportGrid();\n  const { activeViewportId, viewports } = viewportGrid;\n  const { measurementService, displaySetService } = servicesManager.services;\n\n  const machineOptions = Object.assign({}, defaultOptions);\n  machineOptions.actions = Object.assign({}, machineOptions.actions, {\n    jumpToFirstMeasurementInActiveViewport: (ctx, evt) => {\n      const { trackedStudy, trackedSeries, activeViewportId } = ctx;\n      const measurements = measurementService.getMeasurements();\n      const trackedMeasurements = measurements.filter(\n        m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n      );\n\n      console.log(\n        'jumping to measurement reset viewport',\n        activeViewportId,\n        trackedMeasurements[0]\n      );\n\n      const referencedDisplaySetUID = trackedMeasurements[0].displaySetInstanceUID;\n      const referencedDisplaySet = displaySetService.getDisplaySetByUID(referencedDisplaySetUID);\n\n      const referencedImages = referencedDisplaySet.images;\n      const isVolumeIdReferenced = referencedImages[0].imageId.startsWith('volumeId');\n\n      const measurementData = trackedMeasurements[0].data;\n\n      let imageIndex = 0;\n      if (!isVolumeIdReferenced && measurementData) {\n        // if it is imageId referenced find the index of the imageId, we don't have\n        // support for volumeId referenced images yet\n        imageIndex = referencedImages.findIndex(image => {\n          const imageIdToUse = Object.keys(measurementData)[0].substring(8);\n          return image.imageId === imageIdToUse;\n        });\n\n        if (imageIndex === -1) {\n          console.warn('Could not find image index for tracked measurement, using 0');\n          imageIndex = 0;\n        }\n      }\n\n      viewportGridService.setDisplaySetsForViewport({\n        viewportId: activeViewportId,\n        displaySetInstanceUIDs: [referencedDisplaySetUID],\n        viewportOptions: {\n          initialImageOptions: {\n            index: imageIndex,\n          },\n        },\n      });\n    },\n    showStructuredReportDisplaySetInActiveViewport: (ctx, evt) => {\n      if (evt.data.createdDisplaySetInstanceUIDs.length > 0) {\n        const StructuredReportDisplaySetInstanceUID = evt.data.createdDisplaySetInstanceUIDs[0];\n\n        viewportGridService.setDisplaySetsForViewport({\n          viewportId: evt.data.viewportId,\n          displaySetInstanceUIDs: [StructuredReportDisplaySetInstanceUID],\n        });\n      }\n    },\n    discardPreviouslyTrackedMeasurements: (ctx, evt) => {\n      const measurements = measurementService.getMeasurements();\n      const filteredMeasurements = measurements.filter(ms =>\n        ctx.prevTrackedSeries.includes(ms.referenceSeriesUID)\n      );\n      const measurementIds = filteredMeasurements.map(fm => fm.id);\n\n      for (let i = 0; i < measurementIds.length; i++) {\n        measurementService.remove(measurementIds[i]);\n      }\n    },\n    clearAllMeasurements: (ctx, evt) => {\n      const measurements = measurementService.getMeasurements();\n      const measurementIds = measurements.map(fm => fm.uid);\n\n      for (let i = 0; i < measurementIds.length; i++) {\n        measurementService.remove(measurementIds[i]);\n      }\n    },\n  });\n  machineOptions.services = Object.assign({}, machineOptions.services, {\n    promptBeginTracking: promptBeginTracking.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptTrackNewSeries: promptTrackNewSeries.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptTrackNewStudy: promptTrackNewStudy.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptSaveReport: promptSaveReport.bind(null, {\n      servicesManager,\n      commandsManager,\n      extensionManager,\n      appConfig,\n    }),\n    promptHydrateStructuredReport: promptHydrateStructuredReport.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n    hydrateStructuredReport: hydrateStructuredReport.bind(null, {\n      servicesManager,\n      extensionManager,\n      appConfig,\n    }),\n  });\n\n  // TODO: IMPROVE\n  // - Add measurement_updated to cornerstone; debounced? (ext side, or consumption?)\n  // - Friendlier transition/api in front of measurementTracking machine?\n  // - Blocked: viewport overlay shouldn't clip when resized\n  // TODO: PRIORITY\n  // - Fix \"ellipses\" series description dynamic truncate length\n  // - Fix viewport border resize\n  // - created/destroyed hooks for extensions (cornerstone measurement subscriptions in it's `init`)\n\n  const measurementTrackingMachine = Machine(machineConfiguration, machineOptions);\n\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useMachine(\n    measurementTrackingMachine\n  );\n\n  useEffect(() => {\n    // Update the state machine with the active viewport ID\n    sendTrackedMeasurementsEvent('UPDATE_ACTIVE_VIEWPORT_ID', {\n      activeViewportId,\n    });\n  }, [activeViewportId, sendTrackedMeasurementsEvent]);\n\n  // ~~ Listen for changes to ViewportGrid for potential SRs hung in panes when idle\n  useEffect(() => {\n    if (viewports.size > 0) {\n      const activeViewport = viewports.get(activeViewportId);\n\n      if (!activeViewport || !activeViewport?.displaySetInstanceUIDs?.length) {\n        return;\n      }\n\n      // Todo: Getting the first displaySetInstanceUID is wrong, but we don't have\n      // tracking fusion viewports yet. This should change when we do.\n      const { displaySetService } = servicesManager.services;\n      const displaySet = displaySetService.getDisplaySetByUID(\n        activeViewport.displaySetInstanceUIDs[0]\n      );\n\n      if (!displaySet) {\n        return;\n      }\n\n      // If this is an SR produced by our SR SOPClassHandler,\n      // and it hasn't been loaded yet, do that now so we\n      // can check if it can be rehydrated or not.\n      //\n      // Note: This happens:\n      // - If the viewport is not currently an OHIFCornerstoneSRViewport\n      // - If the displaySet has never been hung\n      //\n      // Otherwise, the displaySet will be loaded by the useEffect handler\n      // listening to displaySet changes inside OHIFCornerstoneSRViewport.\n      // The issue here is that this handler in TrackedMeasurementsContext\n      // ends up occurring before the Viewport is created, so the displaySet\n      // is not loaded yet, and isRehydratable is undefined unless we call load().\n      if (\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\n        !displaySet.isLoaded &&\n        displaySet.load\n      ) {\n        displaySet.load();\n      }\n\n      // Magic string\n      // load function added by our sopClassHandler module\n      if (\n        displaySet.SOPClassHandlerId === SR_SOPCLASSHANDLERID &&\n        displaySet.isRehydratable === true\n      ) {\n        console.log('sending event...', trackedMeasurements);\n        sendTrackedMeasurementsEvent('PROMPT_HYDRATE_SR', {\n          displaySetInstanceUID: displaySet.displaySetInstanceUID,\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\n          viewportId: activeViewportId,\n        });\n      }\n    }\n  }, [activeViewportId, sendTrackedMeasurementsEvent, servicesManager.services, viewports]);\n\n  return (\n    <TrackedMeasurementsContext.Provider\n      value={[trackedMeasurements, sendTrackedMeasurementsEvent]}\n    >\n      {children}\n    </TrackedMeasurementsContext.Provider>\n  );\n}\n\nTrackedMeasurementsContextProvider.propTypes = {\n  children: PropTypes.oneOf([PropTypes.func, PropTypes.node]),\n  servicesManager: PropTypes.object.isRequired,\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  appConfig: PropTypes.object,\n};\n\nexport { TrackedMeasurementsContext, TrackedMeasurementsContextProvider, useTrackedMeasurements };\n","import {\n  TrackedMeasurementsContext,\n  TrackedMeasurementsContextProvider,\n  useTrackedMeasurements,\n} from './contexts';\n\nfunction getContextModule({ servicesManager, extensionManager, commandsManager }) {\n  const BoundTrackedMeasurementsContextProvider = TrackedMeasurementsContextProvider.bind(null, {\n    servicesManager,\n    extensionManager,\n    commandsManager,\n  });\n\n  return [\n    {\n      name: 'TrackedMeasurementsContext',\n      context: TrackedMeasurementsContext,\n      provider: BoundTrackedMeasurementsContextProvider,\n    },\n  ];\n}\n\nexport { useTrackedMeasurements };\nexport default getContextModule;\n","import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport { utils } from '@ohif/core';\nimport { StudyBrowser, useImageViewer, useViewportGrid, Dialog, ButtonEnums } from '@ohif/ui';\nimport { useTrackedMeasurements } from '../../getContextModule';\n\nconst { formatDate } = utils;\n\n/**\n *\n * @param {*} param0\n */\nfunction PanelStudyBrowserTracking({\n  servicesManager,\n  getImageSrc,\n  getStudiesForPatientByMRN,\n  requestDisplaySetCreationForStudy,\n  dataSource,\n}) {\n  const { displaySetService, uiDialogService, hangingProtocolService, uiNotificationService } =\n    servicesManager.services;\n  const navigate = useNavigate();\n\n  const { t } = useTranslation('Common');\n\n  // Normally you nest the components so the tree isn't so deep, and the data\n  // doesn't have to have such an intense shape. This works well enough for now.\n  // Tabs --> Studies --> DisplaySets --> Thumbnails\n  const { StudyInstanceUIDs } = useImageViewer();\n  const [{ activeViewportId, viewports }, viewportGridService] = useViewportGrid();\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\n  const [activeTabName, setActiveTabName] = useState('primary');\n  const [expandedStudyInstanceUIDs, setExpandedStudyInstanceUIDs] = useState([\n    ...StudyInstanceUIDs,\n  ]);\n  const [studyDisplayList, setStudyDisplayList] = useState([]);\n  const [displaySets, setDisplaySets] = useState([]);\n  const [thumbnailImageSrcMap, setThumbnailImageSrcMap] = useState({});\n  const [jumpToDisplaySet, setJumpToDisplaySet] = useState(null);\n\n  const onDoubleClickThumbnailHandler = displaySetInstanceUID => {\n    let updatedViewports = [];\n    const viewportId = activeViewportId;\n    try {\n      updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n        viewportId,\n        displaySetInstanceUID\n      );\n    } catch (error) {\n      console.warn(error);\n      uiNotificationService.show({\n        title: 'Thumbnail Double Click',\n        message:\n          'The selected display sets could not be added to the viewport due to a mismatch in the Hanging Protocol rules.',\n        type: 'info',\n        duration: 3000,\n      });\n    }\n\n    viewportGridService.setDisplaySetsForViewports(updatedViewports);\n  };\n\n  const activeViewportDisplaySetInstanceUIDs =\n    viewports.get(activeViewportId)?.displaySetInstanceUIDs;\n\n  const { trackedSeries } = trackedMeasurements.context;\n\n  // ~~ studyDisplayList\n  useEffect(() => {\n    // Fetch all studies for the patient in each primary study\n    async function fetchStudiesForPatient(StudyInstanceUID) {\n      // current study qido\n      const qidoForStudyUID = await dataSource.query.studies.search({\n        studyInstanceUid: StudyInstanceUID,\n      });\n\n      if (!qidoForStudyUID?.length) {\n        navigate('/notfoundstudy', '_self');\n        throw new Error('Invalid study URL');\n      }\n\n      let qidoStudiesForPatient = qidoForStudyUID;\n\n      // try to fetch the prior studies based on the patientID if the\n      // server can respond.\n      try {\n        qidoStudiesForPatient = await getStudiesForPatientByMRN(qidoForStudyUID);\n      } catch (error) {\n        console.warn(error);\n      }\n\n      const mappedStudies = _mapDataSourceStudies(qidoStudiesForPatient);\n      const actuallyMappedStudies = mappedStudies.map(qidoStudy => {\n        return {\n          studyInstanceUid: qidoStudy.StudyInstanceUID,\n          date: formatDate(qidoStudy.StudyDate) || t('NoStudyDate'),\n          description: qidoStudy.StudyDescription,\n          modalities: qidoStudy.ModalitiesInStudy,\n          numInstances: qidoStudy.NumInstances,\n        };\n      });\n\n      setStudyDisplayList(prevArray => {\n        const ret = [...prevArray];\n        for (const study of actuallyMappedStudies) {\n          if (!prevArray.find(it => it.studyInstanceUid === study.studyInstanceUid)) {\n            ret.push(study);\n          }\n        }\n        return ret;\n      });\n    }\n\n    StudyInstanceUIDs.forEach(sid => fetchStudiesForPatient(sid));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [StudyInstanceUIDs, getStudiesForPatientByMRN]);\n\n  // ~~ Initial Thumbnails\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n\n    if (!currentDisplaySets.length) {\n      return;\n    }\n\n    currentDisplaySets.forEach(async dSet => {\n      const newImageSrcEntry = {};\n      const displaySet = displaySetService.getDisplaySetByUID(dSet.displaySetInstanceUID);\n      const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n      const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n      // TODO: Is it okay that imageIds are not returned here for SR displaySets?\n      if (!imageId || displaySet?.unsupported) {\n        return;\n      }\n      // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n      newImageSrcEntry[dSet.displaySetInstanceUID] = await getImageSrc(imageId);\n\n      setThumbnailImageSrcMap(prevState => {\n        return { ...prevState, ...newImageSrcEntry };\n      });\n    });\n  }, [displaySetService, dataSource, getImageSrc]);\n\n  // ~~ displaySets\n  useEffect(() => {\n    const currentDisplaySets = displaySetService.activeDisplaySets;\n\n    if (!currentDisplaySets.length) {\n      return;\n    }\n\n    const mappedDisplaySets = _mapDisplaySets(\n      currentDisplaySets,\n      thumbnailImageSrcMap,\n      trackedSeries,\n      viewports,\n      viewportGridService,\n      dataSource,\n      displaySetService,\n      uiDialogService,\n      uiNotificationService\n    );\n\n    setDisplaySets(mappedDisplaySets);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    displaySetService.activeDisplaySets,\n    trackedSeries,\n    viewports,\n    dataSource,\n    thumbnailImageSrcMap,\n  ]);\n\n  // ~~ subscriptions --> displaySets\n  useEffect(() => {\n    // DISPLAY_SETS_ADDED returns an array of DisplaySets that were added\n    const SubscriptionDisplaySetsAdded = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_ADDED,\n      data => {\n        const { displaySetsAdded, options } = data;\n        displaySetsAdded.forEach(async dSet => {\n          const displaySetInstanceUID = dSet.displaySetInstanceUID;\n\n          const newImageSrcEntry = {};\n          const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n          if (displaySet?.unsupported) {\n            return;\n          }\n\n          if (options.madeInClient) {\n            setJumpToDisplaySet(displaySetInstanceUID);\n          }\n\n          const imageIds = dataSource.getImageIdsForDisplaySet(displaySet);\n          const imageId = imageIds[Math.floor(imageIds.length / 2)];\n\n          // TODO: Is it okay that imageIds are not returned here for SR displaysets?\n          if (!imageId) {\n            return;\n          }\n\n          // When the image arrives, render it and store the result in the thumbnailImgSrcMap\n          newImageSrcEntry[displaySetInstanceUID] = await getImageSrc(imageId);\n          setThumbnailImageSrcMap(prevState => {\n            return { ...prevState, ...newImageSrcEntry };\n          });\n        });\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsAdded.unsubscribe();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [displaySetService, dataSource, getImageSrc, thumbnailImageSrcMap, trackedSeries, viewports]);\n\n  useEffect(() => {\n    // TODO: Will this always hold _all_ the displaySets we care about?\n    // DISPLAY_SETS_CHANGED returns `DisplaySerService.activeDisplaySets`\n    const SubscriptionDisplaySetsChanged = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SETS_CHANGED,\n      changedDisplaySets => {\n        const mappedDisplaySets = _mapDisplaySets(\n          changedDisplaySets,\n          thumbnailImageSrcMap,\n          trackedSeries,\n          viewports,\n          viewportGridService,\n          dataSource,\n          displaySetService,\n          uiDialogService,\n          uiNotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    const SubscriptionDisplaySetMetaDataInvalidated = displaySetService.subscribe(\n      displaySetService.EVENTS.DISPLAY_SET_SERIES_METADATA_INVALIDATED,\n      () => {\n        const mappedDisplaySets = _mapDisplaySets(\n          displaySetService.getActiveDisplaySets(),\n          thumbnailImageSrcMap,\n          trackedSeries,\n          viewports,\n          viewportGridService,\n          dataSource,\n          displaySetService,\n          uiDialogService,\n          uiNotificationService\n        );\n\n        setDisplaySets(mappedDisplaySets);\n      }\n    );\n\n    return () => {\n      SubscriptionDisplaySetsChanged.unsubscribe();\n      SubscriptionDisplaySetMetaDataInvalidated.unsubscribe();\n    };\n  }, [thumbnailImageSrcMap, trackedSeries, viewports, dataSource, displaySetService]);\n\n  const tabs = _createStudyBrowserTabs(\n    StudyInstanceUIDs,\n    studyDisplayList,\n    displaySets,\n    hangingProtocolService\n  );\n\n  // TODO: Should not fire this on \"close\"\n  function _handleStudyClick(StudyInstanceUID) {\n    const shouldCollapseStudy = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    const updatedExpandedStudyInstanceUIDs = shouldCollapseStudy\n      ? [...expandedStudyInstanceUIDs.filter(stdyUid => stdyUid !== StudyInstanceUID)]\n      : [...expandedStudyInstanceUIDs, StudyInstanceUID];\n\n    setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n\n    if (!shouldCollapseStudy) {\n      const madeInClient = true;\n      requestDisplaySetCreationForStudy(displaySetService, StudyInstanceUID, madeInClient);\n    }\n  }\n\n  useEffect(() => {\n    if (jumpToDisplaySet) {\n      // Get element by displaySetInstanceUID\n      const displaySetInstanceUID = jumpToDisplaySet;\n      const element = document.getElementById(`thumbnail-${displaySetInstanceUID}`);\n\n      if (element && typeof element.scrollIntoView === 'function') {\n        // TODO: Any way to support IE here?\n        element.scrollIntoView({ behavior: 'smooth' });\n\n        setJumpToDisplaySet(null);\n      }\n    }\n  }, [jumpToDisplaySet, expandedStudyInstanceUIDs, activeTabName]);\n\n  useEffect(() => {\n    if (!jumpToDisplaySet) {\n      return;\n    }\n\n    const displaySetInstanceUID = jumpToDisplaySet;\n    // Set the activeTabName and expand the study\n    const thumbnailLocation = _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs);\n    if (!thumbnailLocation) {\n      console.warn('jumpToThumbnail: displaySet thumbnail not found.');\n\n      return;\n    }\n    const { tabName, StudyInstanceUID } = thumbnailLocation;\n    setActiveTabName(tabName);\n    const studyExpanded = expandedStudyInstanceUIDs.includes(StudyInstanceUID);\n    if (!studyExpanded) {\n      const updatedExpandedStudyInstanceUIDs = [...expandedStudyInstanceUIDs, StudyInstanceUID];\n      setExpandedStudyInstanceUIDs(updatedExpandedStudyInstanceUIDs);\n    }\n  }, [expandedStudyInstanceUIDs, jumpToDisplaySet, tabs]);\n\n  return (\n    <StudyBrowser\n      tabs={tabs}\n      servicesManager={servicesManager}\n      activeTabName={activeTabName}\n      expandedStudyInstanceUIDs={expandedStudyInstanceUIDs}\n      onClickStudy={_handleStudyClick}\n      onClickTab={clickedTabName => {\n        setActiveTabName(clickedTabName);\n      }}\n      onClickUntrack={displaySetInstanceUID => {\n        const displaySet = displaySetService.getDisplaySetByUID(displaySetInstanceUID);\n        // TODO: shift this somewhere else where we're centralizing this logic?\n        // Potentially a helper from displaySetInstanceUID to this\n        sendTrackedMeasurementsEvent('UNTRACK_SERIES', {\n          SeriesInstanceUID: displaySet.SeriesInstanceUID,\n        });\n      }}\n      onClickThumbnail={() => {}}\n      onDoubleClickThumbnail={onDoubleClickThumbnailHandler}\n      activeDisplaySetInstanceUIDs={activeViewportDisplaySetInstanceUIDs}\n    />\n  );\n}\n\nPanelStudyBrowserTracking.propTypes = {\n  servicesManager: PropTypes.object.isRequired,\n  dataSource: PropTypes.shape({\n    getImageIdsForDisplaySet: PropTypes.func.isRequired,\n  }).isRequired,\n  getImageSrc: PropTypes.func.isRequired,\n  getStudiesForPatientByMRN: PropTypes.func.isRequired,\n  requestDisplaySetCreationForStudy: PropTypes.func.isRequired,\n};\n\nexport default PanelStudyBrowserTracking;\n\n/**\n * Maps from the DataSource's format to a naturalized object\n *\n * @param {*} studies\n */\nfunction _mapDataSourceStudies(studies) {\n  return studies.map(study => {\n    // TODO: Why does the data source return in this format?\n    return {\n      AccessionNumber: study.accession,\n      StudyDate: study.date,\n      StudyDescription: study.description,\n      NumInstances: study.instances,\n      ModalitiesInStudy: study.modalities,\n      PatientID: study.mrn,\n      PatientName: study.patientName,\n      StudyInstanceUID: study.studyInstanceUid,\n      StudyTime: study.time,\n    };\n  });\n}\n\nfunction _mapDisplaySets(\n  displaySets,\n  thumbnailImageSrcMap,\n  trackedSeriesInstanceUIDs,\n  viewports, // TODO: make array of `displaySetInstanceUIDs`?\n  viewportGridService,\n  dataSource,\n  displaySetService,\n  uiDialogService,\n  uiNotificationService\n) {\n  const thumbnailDisplaySets = [];\n  const thumbnailNoImageDisplaySets = [];\n  displaySets\n    .filter(ds => !ds.excludeFromThumbnailBrowser)\n    .forEach(ds => {\n      const imageSrc = thumbnailImageSrcMap[ds.displaySetInstanceUID];\n      const componentType = _getComponentType(ds);\n      const numPanes = viewportGridService.getNumViewportPanes();\n      const viewportIdentificator = [];\n\n      if (numPanes !== 1) {\n        viewports.forEach(viewportData => {\n          if (viewportData?.displaySetInstanceUIDs?.includes(ds.displaySetInstanceUID)) {\n            viewportIdentificator.push(viewportData.viewportLabel);\n          }\n        });\n      }\n\n      const array =\n        componentType === 'thumbnailTracked' ? thumbnailDisplaySets : thumbnailNoImageDisplaySets;\n\n      const { displaySetInstanceUID } = ds;\n\n      const thumbnailProps = {\n        displaySetInstanceUID,\n        description: ds.SeriesDescription,\n        seriesNumber: ds.SeriesNumber,\n        modality: ds.Modality,\n        seriesDate: formatDate(ds.SeriesDate),\n        numInstances: ds.numImageFrames,\n        countIcon: ds.countIcon,\n        messages: ds.messages,\n        StudyInstanceUID: ds.StudyInstanceUID,\n        componentType,\n        imageSrc,\n        dragData: {\n          type: 'displayset',\n          displaySetInstanceUID,\n          // .. Any other data to pass\n        },\n        isTracked: trackedSeriesInstanceUIDs.includes(ds.SeriesInstanceUID),\n        isHydratedForDerivedDisplaySet: ds.isHydrated,\n        viewportIdentificator,\n      };\n\n      if (componentType === 'thumbnailNoImage') {\n        if (dataSource.reject && dataSource.reject.series) {\n          thumbnailProps.canReject = !ds?.unsupported;\n          thumbnailProps.onReject = () => {\n            uiDialogService.create({\n              id: 'ds-reject-sr',\n              centralize: true,\n              isDraggable: false,\n              showOverlay: true,\n              content: Dialog,\n              contentProps: {\n                title: 'Delete Report',\n                body: () => (\n                  <div className=\"bg-primary-dark p-4 text-white\">\n                    <p>Are you sure you want to delete this report?</p>\n                    <p className=\"mt-2\">This action cannot be undone.</p>\n                  </div>\n                ),\n                actions: [\n                  {\n                    id: 'cancel',\n                    text: 'Cancel',\n                    type: ButtonEnums.type.secondary,\n                  },\n                  {\n                    id: 'yes',\n                    text: 'Yes',\n                    type: ButtonEnums.type.primary,\n                    classes: ['reject-yes-button'],\n                  },\n                ],\n                onClose: () => uiDialogService.dismiss({ id: 'ds-reject-sr' }),\n                onShow: () => {\n                  const yesButton = document.querySelector('.reject-yes-button');\n\n                  yesButton.focus();\n                },\n                onSubmit: async ({ action }) => {\n                  switch (action.id) {\n                    case 'yes':\n                      try {\n                        await dataSource.reject.series(ds.StudyInstanceUID, ds.SeriesInstanceUID);\n                        displaySetService.deleteDisplaySet(displaySetInstanceUID);\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                        uiNotificationService.show({\n                          title: 'Delete Report',\n                          message: 'Report deleted successfully',\n                          type: 'success',\n                        });\n                      } catch (error) {\n                        uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                        uiNotificationService.show({\n                          title: 'Delete Report',\n                          message: 'Failed to delete report',\n                          type: 'error',\n                        });\n                      }\n                      break;\n                    case 'cancel':\n                      uiDialogService.dismiss({ id: 'ds-reject-sr' });\n                      break;\n                  }\n                },\n              },\n            });\n          };\n        } else {\n          thumbnailProps.canReject = false;\n        }\n      }\n\n      array.push(thumbnailProps);\n    });\n\n  return [...thumbnailDisplaySets, ...thumbnailNoImageDisplaySets];\n}\n\nconst thumbnailNoImageModalities = ['SR', 'SEG', 'SM', 'RTSTRUCT', 'RTPLAN', 'RTDOSE', 'DOC', 'OT'];\n\nfunction _getComponentType(ds) {\n  if (thumbnailNoImageModalities.includes(ds.Modality) || ds?.unsupported) {\n    return 'thumbnailNoImage';\n  }\n\n  return 'thumbnailTracked';\n}\n\n/**\n *\n * @param {string[]} primaryStudyInstanceUIDs\n * @param {object[]} studyDisplayList\n * @param {string} studyDisplayList.studyInstanceUid\n * @param {string} studyDisplayList.date\n * @param {string} studyDisplayList.description\n * @param {string} studyDisplayList.modalities\n * @param {number} studyDisplayList.numInstances\n * @param {object[]} displaySets\n * @returns tabs - The prop object expected by the StudyBrowser component\n */\nfunction _createStudyBrowserTabs(\n  primaryStudyInstanceUIDs,\n  studyDisplayList,\n  displaySets,\n  hangingProtocolService\n) {\n  const primaryStudies = [];\n  const recentStudies = [];\n  const allStudies = [];\n\n  // Iterate over each study...\n  studyDisplayList.forEach(study => {\n    // Find it's display sets\n    const displaySetsForStudy = displaySets.filter(\n      ds => ds.StudyInstanceUID === study.studyInstanceUid\n    );\n\n    // Sort them\n    const dsSortFn = hangingProtocolService.getDisplaySetSortFunction();\n    displaySetsForStudy.sort(dsSortFn);\n\n    /* Sort by series number, then by series date\n      displaySetsForStudy.sort((a, b) => {\n        if (a.seriesNumber !== b.seriesNumber) {\n          return a.seriesNumber - b.seriesNumber;\n        }\n\n        const seriesDateA = Date.parse(a.seriesDate);\n        const seriesDateB = Date.parse(b.seriesDate);\n\n        return seriesDateA - seriesDateB;\n      });\n    */\n\n    // Map the study to it's tab/view representation\n    const tabStudy = Object.assign({}, study, {\n      displaySets: displaySetsForStudy,\n    });\n\n    // Add the \"tab study\" to the 'primary', 'recent', and/or 'all' tab group(s)\n    if (primaryStudyInstanceUIDs.includes(study.studyInstanceUid)) {\n      primaryStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    } else {\n      // TODO: Filter allStudies to dates within one year of current date\n      recentStudies.push(tabStudy);\n      allStudies.push(tabStudy);\n    }\n  });\n\n  // Newest first\n  const _byDate = (a, b) => {\n    const dateA = Date.parse(a);\n    const dateB = Date.parse(b);\n\n    return dateB - dateA;\n  };\n\n  const tabs = [\n    {\n      name: 'primary',\n      label: 'Primary',\n      studies: primaryStudies.sort((studyA, studyB) => _byDate(studyA.date, studyB.date)),\n    },\n    {\n      name: 'recent',\n      label: 'Recent',\n      studies: recentStudies.sort((studyA, studyB) => _byDate(studyA.date, studyB.date)),\n    },\n    {\n      name: 'all',\n      label: 'All',\n      studies: allStudies.sort((studyA, studyB) => _byDate(studyA.date, studyB.date)),\n    },\n  ];\n\n  return tabs;\n}\n\nfunction _findTabAndStudyOfDisplaySet(displaySetInstanceUID, tabs) {\n  for (let t = 0; t < tabs.length; t++) {\n    const { studies } = tabs[t];\n\n    for (let s = 0; s < studies.length; s++) {\n      const { displaySets } = studies[s];\n\n      for (let d = 0; d < displaySets.length; d++) {\n        const displaySet = displaySets[d];\n\n        if (displaySet.displaySetInstanceUID === displaySetInstanceUID) {\n          return {\n            tabName: tabs[t].name,\n            StudyInstanceUID: studies[s].studyInstanceUid,\n          };\n        }\n      }\n    }\n  }\n}","/**\n * @param {*} cornerstone\n * @param {*} imageId\n */\nfunction getImageSrcFromImageId(cornerstone, imageId) {\n  return new Promise((resolve, reject) => {\n    const canvas = document.createElement('canvas');\n    cornerstone.utilities\n      .loadImageToCanvas({ canvas, imageId })\n      .then(imageId => {\n        resolve(canvas.toDataURL());\n      })\n      .catch(reject);\n  });\n}\n\nexport default getImageSrcFromImageId;\n","function requestDisplaySetCreationForStudy(\n  dataSource,\n  displaySetService,\n  StudyInstanceUID,\n  madeInClient\n) {\n  if (\n    displaySetService.activeDisplaySets.some(\n      displaySet => displaySet.StudyInstanceUID === StudyInstanceUID\n    )\n  ) {\n    return;\n  }\n\n  dataSource.retrieve.series.metadata({ StudyInstanceUID, madeInClient });\n}\n\nexport default requestDisplaySetCreationForStudy;\n","import React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\n//\nimport PanelStudyBrowserTracking from './PanelStudyBrowserTracking';\nimport getImageSrcFromImageId from './getImageSrcFromImageId';\nimport requestDisplaySetCreationForStudy from './requestDisplaySetCreationForStudy';\n\nfunction _getStudyForPatientUtility(extensionManager) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-default.utilityModule.common'\n  );\n\n  const { getStudiesForPatientByMRN } = utilityModule.exports;\n  return getStudiesForPatientByMRN;\n}\n\n/**\n * Wraps the PanelStudyBrowser and provides features afforded by managers/services\n *\n * @param {object} params\n * @param {object} commandsManager\n * @param {object} extensionManager\n */\nfunction WrappedPanelStudyBrowserTracking({ commandsManager, extensionManager, servicesManager }) {\n  const dataSource = extensionManager.getActiveDataSource()[0];\n\n  const getStudiesForPatientByMRN = _getStudyForPatientUtility(extensionManager);\n  const _getStudiesForPatientByMRN = getStudiesForPatientByMRN.bind(null, dataSource);\n  const _getImageSrcFromImageId = useCallback(\n    _createGetImageSrcFromImageIdFn(extensionManager),\n    []\n  );\n  const _requestDisplaySetCreationForStudy = requestDisplaySetCreationForStudy.bind(\n    null,\n    dataSource\n  );\n\n  return (\n    <PanelStudyBrowserTracking\n      servicesManager={servicesManager}\n      dataSource={dataSource}\n      getImageSrc={_getImageSrcFromImageId}\n      getStudiesForPatientByMRN={_getStudiesForPatientByMRN}\n      requestDisplaySetCreationForStudy={_requestDisplaySetCreationForStudy}\n    />\n  );\n}\n\n/**\n * Grabs cornerstone library reference using a dependent command from\n * the @ohif/extension-cornerstone extension. Then creates a helper function\n * that can take an imageId and return an image src.\n *\n * @param {func} getCommand - CommandManager's getCommand method\n * @returns {func} getImageSrcFromImageId - A utility function powered by\n * cornerstone\n */\nfunction _createGetImageSrcFromImageIdFn(extensionManager) {\n  const utilities = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  try {\n    const { cornerstone } = utilities.exports.getCornerstoneLibraries();\n    return getImageSrcFromImageId.bind(null, cornerstone);\n  } catch (ex) {\n    throw new Error('Required command not found');\n  }\n}\n\nWrappedPanelStudyBrowserTracking.propTypes = {\n  commandsManager: PropTypes.object.isRequired,\n  extensionManager: PropTypes.object.isRequired,\n  servicesManager: PropTypes.object.isRequired,\n};\n\nexport default WrappedPanelStudyBrowserTracking;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useTranslation } from 'react-i18next';\n\nimport { Button, ButtonEnums } from '@ohif/ui';\n\nfunction ActionButtons({ onExportClick, onCreateReportClick, disabled }) {\n  const { t } = useTranslation('MeasurementTable');\n\n  return (\n    <React.Fragment>\n      <Button\n        onClick={onExportClick}\n        disabled={disabled}\n        type={ButtonEnums.type.secondary}\n        size={ButtonEnums.size.small}\n      >\n        {t('Export')}\n      </Button>\n      <Button\n        className=\"ml-2\"\n        onClick={onCreateReportClick}\n        type={ButtonEnums.type.secondary}\n        size={ButtonEnums.size.small}\n        disabled={disabled}\n      >\n        {t('Create Report')}\n      </Button>\n    </React.Fragment>\n  );\n}\n\nActionButtons.propTypes = {\n  onExportClick: PropTypes.func,\n  onCreateReportClick: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n\nActionButtons.defaultProps = {\n  onExportClick: () => alert('Export'),\n  onCreateReportClick: () => alert('Create Report'),\n  disabled: false,\n};\n\nexport default ActionButtons;\n","import React, { useEffect, useState, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  StudySummary,\n  MeasurementTable,\n  Dialog,\n  Input,\n  useViewportGrid,\n  ButtonEnums,\n} from '@ohif/ui';\nimport { DicomMetadataStore, utils } from '@ohif/core';\nimport { useDebounce } from '@hooks';\nimport { useAppConfig } from '@state';\nimport ActionButtons from './ActionButtons';\nimport { useTrackedMeasurements } from '../../getContextModule';\nimport debounce from 'lodash.debounce';\n\nconst { downloadCSVReport } = utils;\nconst { formatDate } = utils;\n\nconst DISPLAY_STUDY_SUMMARY_INITIAL_VALUE = {\n  key: undefined, //\n  date: '', // '07-Sep-2010',\n  modality: '', // 'CT',\n  description: '', // 'CHEST/ABD/PELVIS W CONTRAST',\n};\n\nfunction PanelMeasurementTableTracking({ servicesManager, extensionManager }) {\n  const [viewportGrid] = useViewportGrid();\n  const [measurementChangeTimestamp, setMeasurementsUpdated] = useState(Date.now().toString());\n  const debouncedMeasurementChangeTimestamp = useDebounce(measurementChangeTimestamp, 200);\n  const { measurementService, uiDialogService, displaySetService } = servicesManager.services;\n  const [trackedMeasurements, sendTrackedMeasurementsEvent] = useTrackedMeasurements();\n  const { trackedStudy, trackedSeries } = trackedMeasurements.context;\n  const [displayStudySummary, setDisplayStudySummary] = useState(\n    DISPLAY_STUDY_SUMMARY_INITIAL_VALUE\n  );\n  const [displayMeasurements, setDisplayMeasurements] = useState([]);\n  const measurementsPanelRef = useRef(null);\n  const [appConfig] = useAppConfig();\n\n  useEffect(() => {\n    const measurements = measurementService.getMeasurements();\n    const filteredMeasurements = measurements.filter(\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n    );\n\n    const mappedMeasurements = filteredMeasurements.map(m =>\n      _mapMeasurementToDisplay(m, measurementService.VALUE_TYPES, displaySetService)\n    );\n    setDisplayMeasurements(mappedMeasurements);\n    // eslint-ignore-next-line\n  }, [measurementService, trackedStudy, trackedSeries, debouncedMeasurementChangeTimestamp]);\n\n  const updateDisplayStudySummary = async () => {\n    if (trackedMeasurements.matches('tracking')) {\n      const StudyInstanceUID = trackedStudy;\n      const studyMeta = DicomMetadataStore.getStudy(StudyInstanceUID);\n      const instanceMeta = studyMeta.series[0].instances[0];\n      const { StudyDate, StudyDescription } = instanceMeta;\n\n      const modalities = new Set();\n      studyMeta.series.forEach(series => {\n        if (trackedSeries.includes(series.SeriesInstanceUID)) {\n          modalities.add(series.instances[0].Modality);\n        }\n      });\n      const modality = Array.from(modalities).join('/');\n\n      if (displayStudySummary.key !== StudyInstanceUID) {\n        setDisplayStudySummary({\n          key: StudyInstanceUID,\n          date: StudyDate, // TODO: Format: '07-Sep-2010'\n          modality,\n          description: StudyDescription,\n        });\n      }\n    } else if (trackedStudy === '' || trackedStudy === undefined) {\n      setDisplayStudySummary(DISPLAY_STUDY_SUMMARY_INITIAL_VALUE);\n    }\n  };\n\n  // ~~ DisplayStudySummary\n  useEffect(() => {\n    updateDisplayStudySummary();\n  }, [displayStudySummary.key, trackedMeasurements, trackedStudy, updateDisplayStudySummary]);\n\n  // TODO: Better way to consolidated, debounce, check on change?\n  // Are we exposing the right API for measurementService?\n  // This watches for ALL measurementService changes. It updates a timestamp,\n  // which is debounced. After a brief period of inactivity, this triggers\n  // a re-render where we grab up-to-date measurements\n  useEffect(() => {\n    const added = measurementService.EVENTS.MEASUREMENT_ADDED;\n    const addedRaw = measurementService.EVENTS.RAW_MEASUREMENT_ADDED;\n    const updated = measurementService.EVENTS.MEASUREMENT_UPDATED;\n    const removed = measurementService.EVENTS.MEASUREMENT_REMOVED;\n    const cleared = measurementService.EVENTS.MEASUREMENTS_CLEARED;\n    const subscriptions = [];\n\n    [added, addedRaw, updated, removed, cleared].forEach(evt => {\n      subscriptions.push(\n        measurementService.subscribe(evt, () => {\n          setMeasurementsUpdated(Date.now().toString());\n          if (evt === added) {\n            debounce(() => {\n              measurementsPanelRef.current.scrollTop = measurementsPanelRef.current.scrollHeight;\n            }, 300)();\n          }\n        }).unsubscribe\n      );\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, [measurementService, sendTrackedMeasurementsEvent]);\n\n  async function exportReport() {\n    const measurements = measurementService.getMeasurements();\n    const trackedMeasurements = measurements.filter(\n      m => trackedStudy === m.referenceStudyUID && trackedSeries.includes(m.referenceSeriesUID)\n    );\n\n    downloadCSVReport(trackedMeasurements, measurementService);\n  }\n\n  const jumpToImage = ({ uid, isActive }) => {\n    measurementService.jumpToMeasurement(viewportGrid.activeViewportId, uid);\n\n    onMeasurementItemClickHandler({ uid, isActive });\n  };\n\n  const onMeasurementItemEditHandler = ({ uid, isActive }) => {\n    const measurement = measurementService.getMeasurement(uid);\n    jumpToImage({ uid, isActive });\n\n    const onSubmitHandler = ({ action, value }) => {\n      switch (action.id) {\n        case 'save': {\n          measurementService.update(\n            uid,\n            {\n              ...measurement,\n              ...value,\n            },\n            true\n          );\n        }\n      }\n      uiDialogService.dismiss({ id: 'enter-annotation' });\n    };\n\n    uiDialogService.create({\n      id: 'enter-annotation',\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Annotation',\n        noCloseButton: true,\n        value: { label: measurement.label || '' },\n        body: ({ value, setValue }) => {\n          const onChangeHandler = event => {\n            event.persist();\n            setValue(value => ({ ...value, label: event.target.value }));\n          };\n\n          const onKeyPressHandler = event => {\n            if (event.key === 'Enter') {\n              onSubmitHandler({ value, action: { id: 'save' } });\n            }\n          };\n          return (\n            <Input\n              label=\"Enter your annotation\"\n              labelClassName=\"text-white grow text-[14px] leading-[1.2]\"\n              autoFocus\n              id=\"annotation\"\n              className=\"border-primary-main bg-black\"\n              type=\"text\"\n              value={value.label}\n              onChange={onChangeHandler}\n              onKeyPress={onKeyPressHandler}\n            />\n          );\n        },\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Save', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n      },\n    });\n  };\n\n  const onMeasurementItemClickHandler = ({ uid, isActive }) => {\n    if (!isActive) {\n      const measurements = [...displayMeasurements];\n      const measurement = measurements.find(m => m.uid === uid);\n\n      measurements.forEach(m => (m.isActive = m.uid !== uid ? false : true));\n      measurement.isActive = true;\n      setDisplayMeasurements(measurements);\n    }\n  };\n\n  const displayMeasurementsWithoutFindings = displayMeasurements.filter(\n    dm => dm.measurementType !== measurementService.VALUE_TYPES.POINT\n  );\n  const additionalFindings = displayMeasurements.filter(\n    dm => dm.measurementType === measurementService.VALUE_TYPES.POINT\n  );\n\n  return (\n    <>\n      <div\n        className=\"invisible-scrollbar overflow-y-auto overflow-x-hidden\"\n        ref={measurementsPanelRef}\n        data-cy={'trackedMeasurements-panel'}\n      >\n        {displayStudySummary.key && (\n          <StudySummary\n            date={formatDate(displayStudySummary.date)}\n            modality={displayStudySummary.modality}\n            description={displayStudySummary.description}\n          />\n        )}\n        <MeasurementTable\n          title=\"Measurements\"\n          data={displayMeasurementsWithoutFindings}\n          servicesManager={servicesManager}\n          onClick={jumpToImage}\n          onEdit={onMeasurementItemEditHandler}\n        />\n        {additionalFindings.length !== 0 && (\n          <MeasurementTable\n            title=\"Additional Findings\"\n            data={additionalFindings}\n            servicesManager={servicesManager}\n            onClick={jumpToImage}\n            onEdit={onMeasurementItemEditHandler}\n          />\n        )}\n      </div>\n      {!appConfig?.disableEditing && (\n        <div className=\"flex justify-center p-4\">\n          <ActionButtons\n            onExportClick={exportReport}\n            onCreateReportClick={() => {\n              sendTrackedMeasurementsEvent('SAVE_REPORT', {\n                viewportId: viewportGrid.activeViewportId,\n                isBackupSave: true,\n              });\n            }}\n            disabled={\n              additionalFindings.length === 0 && displayMeasurementsWithoutFindings.length === 0\n            }\n          />\n        </div>\n      )}\n    </>\n  );\n}\n\nPanelMeasurementTableTracking.propTypes = {\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      measurementService: PropTypes.shape({\n        getMeasurements: PropTypes.func.isRequired,\n        VALUE_TYPES: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\n// TODO: This could be a measurementService mapper\nfunction _mapMeasurementToDisplay(measurement, types, displaySetService) {\n  const { referenceStudyUID, referenceSeriesUID, SOPInstanceUID } = measurement;\n\n  // TODO: We don't deal with multiframe well yet, would need to update\n  // This in OHIF-312 when we add FrameIndex to measurements.\n\n  const instance = DicomMetadataStore.getInstance(\n    referenceStudyUID,\n    referenceSeriesUID,\n    SOPInstanceUID\n  );\n\n  const displaySets = displaySetService.getDisplaySetsForSeries(referenceSeriesUID);\n\n  if (!displaySets[0] || !displaySets[0].images) {\n    throw new Error('The tracked measurements panel should only be tracking \"stack\" displaySets.');\n  }\n\n  const {\n    displayText: baseDisplayText,\n    uid,\n    label: baseLabel,\n    type,\n    selected,\n    findingSites,\n    finding,\n  } = measurement;\n\n  const firstSite = findingSites?.[0];\n  const label = baseLabel || finding?.text || firstSite?.text || '(empty)';\n  let displayText = baseDisplayText || [];\n  if (findingSites) {\n    const siteText = [];\n    findingSites.forEach(site => {\n      if (site?.text !== label) {\n        siteText.push(site.text);\n      }\n    });\n    displayText = [...siteText, ...displayText];\n  }\n  if (finding && finding?.text !== label) {\n    displayText = [finding.text, ...displayText];\n  }\n\n  return {\n    uid,\n    label,\n    baseLabel,\n    measurementType: type,\n    displayText,\n    baseDisplayText,\n    isActive: selected,\n    finding,\n    findingSites,\n  };\n}\n\nexport default PanelMeasurementTableTracking;\n","import { Types } from '@ohif/core';\nimport { PanelMeasurementTableTracking, PanelStudyBrowserTracking } from './panels';\nimport i18n from 'i18next';\n\n// TODO:\n// - No loading UI exists yet\n// - cancel promises when component is destroyed\n// - show errors in UI for thumbnails if promise fails\nfunction getPanelModule({ commandsManager, extensionManager, servicesManager }): Types.Panel[] {\n  return [\n    {\n      name: 'seriesList',\n      iconName: 'tab-studies',\n      iconLabel: 'Studies',\n      label: i18n.t('SidePanel:Studies'),\n      component: PanelStudyBrowserTracking.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n\n    {\n      name: 'trackedMeasurements',\n      iconName: 'tab-linear',\n      iconLabel: 'Measure',\n      label: i18n.t('SidePanel:Measurements'),\n      component: PanelMeasurementTableTracking.bind(null, {\n        commandsManager,\n        extensionManager,\n        servicesManager,\n      }),\n    },\n  ];\n}\n\nexport default getPanelModule;\n","import React from 'react';\n\nconst Component = React.lazy(() => {\n  return import(/* webpackPrefetch: true */ './viewports/TrackedCornerstoneViewport');\n});\n\nconst OHIFCornerstoneViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\nfunction getViewportModule({ servicesManager, commandsManager, extensionManager }) {\n  const ExtendedOHIFCornerstoneTrackingViewport = props => {\n    return (\n      <OHIFCornerstoneViewport\n        servicesManager={servicesManager}\n        commandsManager={commandsManager}\n        extensionManager={extensionManager}\n        {...props}\n      />\n    );\n  };\n\n  return [\n    {\n      name: 'cornerstone-tracked',\n      component: ExtendedOHIFCornerstoneTrackingViewport,\n    },\n  ];\n}\n\nexport default getViewportModule;\n","import getContextModule from './getContextModule';\nimport getPanelModule from './getPanelModule';\nimport getViewportModule from './getViewportModule';\nimport { id } from './id.js';\n\nconst measurementTrackingExtension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   */\n  id,\n\n  getContextModule,\n  getPanelModule,\n  getViewportModule,\n};\n\nexport default measurementTrackingExtension;\n","import packageJson from '../package.json';\n\nconst id = packageJson.name;\n\nexport { id };\n"],"names":["RESPONSE","machineConfiguration","id","initial","context","activeViewportId","trackedStudy","trackedSeries","ignoredSeries","prevTrackedStudy","prevTrackedSeries","prevIgnoredSeries","ignoredSRSeriesForHydration","isDirty","states","off","type","idle","entry","on","TRACK_SERIES","SET_TRACKED_SERIES","target","actions","PROMPT_HYDRATE_SR","cond","RESTORE_PROMPT_HYDRATE_SR","HYDRATE_SR","UPDATE_ACTIVE_VIEWPORT_ID","assign","_","event","promptBeginTracking","invoke","src","onDone","onError","tracking","UNTRACK_SERIES","SAVE_REPORT","SET_DIRTY","promptTrackNewSeries","promptTrackNewStudy","promptSaveReport","promptHydrateStructuredReport","hydrateStructuredReport","strict","defaultOptions","services","ctx","evt","discardPreviouslyTrackedMeasurements","console","log","clearAllMeasurements","jumpToFirstMeasurementInActiveViewport","warn","showStructuredReportDisplaySetInActiveViewport","clearContext","setTrackedStudyAndSeries","slice","data","StudyInstanceUID","SeriesInstanceUID","setTrackedStudyAndMultipleSeries","studyInstanceUID","seriesInstanceUIDs","SeriesInstanceUIDs","setIsDirtyToClean","setIsDirty","ignoreSeries","ignoreHydrationForSRSeries","srSeriesInstanceUID","addTrackedSeries","removeTrackedSeries","filter","ser","guards","shouldSetDirty","undefined","includes","shouldKillMachine","userResponse","shouldAddSeries","shouldSetStudyAndSeries","shouldAddIgnoredSeries","shouldPromptSaveReport","shouldIgnoreHydrationForSR","shouldSaveAndContinueWithSameReport","isBackupSave","shouldSaveAndStartNewReport","shouldHydrateStructuredReport","hasRemainingTrackedSeries","length","hasNotIgnoredSRSeriesForHydration","isNewStudy","isNewSeries","NO_NEVER","CANCEL","CREATE_REPORT","ADD_SERIES","SET_STUDY_AND_SERIES","servicesManager","extensionManager","uiViewportDialogService","viewportId","Promise","async","resolve","reject","promptResult","message","i18n","t","ButtonEnums","secondary","text","value","primary","onSubmit","result","hide","show","onOutsideClick","_askTrackMeasurements","NO_NOT_FOR_SERIES","UIViewportDialogService","_askShouldAddMeasurements","_askSaveDiscardOrCancel","MIN_SR_SERIES_NUMBER","commandsManager","uiDialogService","measurementService","displaySetService","displaySetInstanceUIDs","createReportDialogPrompt","action","dataSource","getDataSources","trackedMeasurements","getMeasurements","m","referenceStudyUID","referenceSeriesUID","SeriesDescription","SeriesNumber","srSeriesNumbers","getActiveDisplaySets","ds","Modality","map","Math","max","getNextSRSeriesNumber","getReport","runCommand","measurementData","additionalFindingTypes","options","createReportAsync","createdDisplaySetInstanceUIDs","HYDRATE_REPORT","appConfig","displaySetInstanceUID","srDisplaySet","getDisplaySetByUID","hydrationResult","baseHydrateStructuredReport","TrackedMeasurementsContext","React","displayName","useTrackedMeasurements","useContext","SR_SOPCLASSHANDLERID","TrackedMeasurementsContextProvider","children","useAppConfig","viewportGrid","viewportGridService","useViewportGrid","viewports","machineOptions","Object","referencedDisplaySetUID","referencedImages","images","isVolumeIdReferenced","imageId","startsWith","imageIndex","findIndex","image","imageIdToUse","keys","substring","setDisplaySetsForViewport","viewportOptions","initialImageOptions","index","StructuredReportDisplaySetInstanceUID","measurementIds","ms","fm","i","remove","uid","bind","measurementTrackingMachine","Machine","sendTrackedMeasurementsEvent","useMachine","useEffect","size","activeViewport","get","displaySet","SOPClassHandlerId","isLoaded","load","isRehydratable","Provider","propTypes","PropTypes","isRequired","BoundTrackedMeasurementsContextProvider","name","provider","formatDate","utils","PanelStudyBrowserTracking","getImageSrc","getStudiesForPatientByMRN","requestDisplaySetCreationForStudy","hangingProtocolService","uiNotificationService","navigate","useNavigate","useTranslation","StudyInstanceUIDs","useImageViewer","activeTabName","setActiveTabName","useState","expandedStudyInstanceUIDs","setExpandedStudyInstanceUIDs","studyDisplayList","setStudyDisplayList","displaySets","setDisplaySets","thumbnailImageSrcMap","setThumbnailImageSrcMap","jumpToDisplaySet","setJumpToDisplaySet","activeViewportDisplaySetInstanceUIDs","forEach","sid","qidoForStudyUID","query","studies","search","studyInstanceUid","Error","qidoStudiesForPatient","error","actuallyMappedStudies","study","AccessionNumber","accession","StudyDate","date","StudyDescription","description","NumInstances","instances","ModalitiesInStudy","modalities","PatientID","mrn","PatientName","patientName","StudyTime","time","qidoStudy","numInstances","prevArray","ret","find","it","push","fetchStudiesForPatient","currentDisplaySets","activeDisplaySets","newImageSrcEntry","dSet","imageIds","getImageIdsForDisplaySet","floor","unsupported","prevState","mappedDisplaySets","_mapDisplaySets","SubscriptionDisplaySetsAdded","subscribe","EVENTS","DISPLAY_SETS_ADDED","displaySetsAdded","madeInClient","unsubscribe","SubscriptionDisplaySetsChanged","DISPLAY_SETS_CHANGED","changedDisplaySets","SubscriptionDisplaySetMetaDataInvalidated","DISPLAY_SET_SERIES_METADATA_INVALIDATED","tabs","primaryStudyInstanceUIDs","primaryStudies","recentStudies","allStudies","displaySetsForStudy","dsSortFn","getDisplaySetSortFunction","sort","tabStudy","_byDate","a","b","dateA","Date","parse","label","studyA","studyB","_createStudyBrowserTabs","element","document","getElementById","scrollIntoView","behavior","thumbnailLocation","s","d","tabName","_findTabAndStudyOfDisplaySet","updatedExpandedStudyInstanceUIDs","StudyBrowser","onClickStudy","shouldCollapseStudy","stdyUid","onClickTab","clickedTabName","onClickUntrack","onClickThumbnail","onDoubleClickThumbnail","updatedViewports","getViewportsRequireUpdate","title","duration","setDisplaySetsForViewports","activeDisplaySetInstanceUIDs","trackedSeriesInstanceUIDs","thumbnailDisplaySets","thumbnailNoImageDisplaySets","excludeFromThumbnailBrowser","imageSrc","componentType","thumbnailNoImageModalities","_getComponentType","numPanes","getNumViewportPanes","viewportIdentificator","viewportData","viewportLabel","array","thumbnailProps","seriesNumber","modality","seriesDate","SeriesDate","numImageFrames","countIcon","messages","dragData","isTracked","isHydratedForDerivedDisplaySet","isHydrated","series","canReject","onReject","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","body","className","classes","onClose","dismiss","onShow","querySelector","focus","deleteDisplaySet","cornerstone","canvas","createElement","utilities","loadImageToCanvas","then","toDataURL","catch","some","retrieve","metadata","WrappedPanelStudyBrowserTracking","getActiveDataSource","utilityModule","getModuleEntry","exports","_getStudyForPatientUtility","_getStudiesForPatientByMRN","_getImageSrcFromImageId","useCallback","getCornerstoneLibraries","getImageSrcFromImageId","ex","_createGetImageSrcFromImageIdFn","_requestDisplaySetCreationForStudy","ActionButtons","onExportClick","onCreateReportClick","disabled","Button","onClick","small","defaultProps","alert","downloadCSVReport","DISPLAY_STUDY_SUMMARY_INITIAL_VALUE","key","PanelMeasurementTableTracking","measurementChangeTimestamp","setMeasurementsUpdated","now","toString","debouncedMeasurementChangeTimestamp","useDebounce","displayStudySummary","setDisplayStudySummary","displayMeasurements","setDisplayMeasurements","measurementsPanelRef","useRef","mappedMeasurements","measurement","types","SOPInstanceUID","DicomMetadataStore","getInstance","getDisplaySetsForSeries","displayText","baseDisplayText","baseLabel","selected","findingSites","finding","firstSite","siteText","site","measurementType","isActive","_mapMeasurementToDisplay","VALUE_TYPES","updateDisplayStudySummary","matches","studyMeta","getStudy","instanceMeta","Set","add","Array","from","join","added","MEASUREMENT_ADDED","addedRaw","RAW_MEASUREMENT_ADDED","updated","MEASUREMENT_UPDATED","removed","MEASUREMENT_REMOVED","cleared","MEASUREMENTS_CLEARED","subscriptions","debounce","current","scrollTop","scrollHeight","unsub","jumpToImage","jumpToMeasurement","onMeasurementItemClickHandler","onMeasurementItemEditHandler","getMeasurement","onSubmitHandler","update","noCloseButton","setValue","Input","labelClassName","autoFocus","onChange","persist","onKeyPress","measurements","displayMeasurementsWithoutFindings","dm","POINT","additionalFindings","ref","StudySummary","MeasurementTable","onEdit","disableEditing","iconName","iconLabel","component","Component","OHIFCornerstoneViewport","props","fallback","_extends","packageJson","getContextModule","getPanelModule","getViewportModule"],"sourceRoot":""}